-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Хост: 10.0.1.28
-- Время создания: Июн 06 2019 г., 09:28
-- Версия сервера: 5.7.22-22
-- Версия PHP: 7.1.25

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `ajax`
--
CREATE DATABASE IF NOT EXISTS `ajax` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
USE `ajax`;
-- --------------------------------------------------------

--
-- Структура таблицы `content`
--

CREATE TABLE `content` (
  `id` int(3) NOT NULL COMMENT 'ID',
  `alias_menu` varchar(50) COLLATE utf8_unicode_ci NOT NULL COMMENT 'Алиас меню привязки',
  `title` varchar(100) COLLATE utf8_unicode_ci NOT NULL COMMENT 'Заголовок страницы',
  `text` text COLLATE utf8_unicode_ci NOT NULL COMMENT 'Контент страницы'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='Хранение страниц сайта';

--
-- Дамп данных таблицы `content`
--

INSERT INTO `content` (`id`, `alias_menu`, `title`, `text`) VALUES
(1, 'main', 'Введение в AJAX', '<article class=\"formatted\" itemscope=\"\" itemtype=\"http://schema.org/TechArticle\"><meta itemprop=\"name\" content=\"Введение в AJAX и COMET\"><div itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"><meta itemprop=\"email\" content=\"iliakan@gmail.com\"><meta itemprop=\"name\" content=\"Ilya Kantor\"></div><div itemprop=\"articleBody\"><p>В этой главе мы «обзорно», на уровне возможностей и примеров рассмотрим технологию AJAX. Пока что с минимумом технических деталей.</p>\r\n<p>Она будет полезна для понимания, что такое AJAX и с чем его едят.</p>\r\n<h2><a class=\"main__anchor\" name=\"chto-takoe-ajax\" href=\"#chto-takoe-ajax\">Что такое AJAX?</a></h2><p>AJAX (аббревиатура от «<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ml») – технология обращения к серверу без перезагрузки страницы.</p>\r\n<p>За счет этого уменьшается время отклика и веб-приложение по интерактивности больше напоминает десктоп.</p>\r\n<p>Несмотря на то, что в названии технологии присутствует буква <code>X</code> (от слова XML), использовать XML вовсе не обязательно. Под AJAX подразумевают любое общение с сервером без перезагрузки страницы, организованное при помощи JavaScript.</p>\r\n<h2><a class=\"main__anchor\" name=\"chto-ya-mogu-sdelat-s-pomoschyu-ajax\" href=\"#chto-ya-mogu-sdelat-s-pomoschyu-ajax\">Что я могу сделать с помощью AJAX?</a></h2><dl>\r\n<dt>Элементы интерфейса</dt>\r\n<dd>\r\n<p>В первую очередь AJAX полезен для форм и кнопок, связанных с элементарными действиями: добавить в корзину, подписаться, и т.п.</p>\r\n<p>Сейчас – в порядке вещей, что такие действия на сайтах осуществляются без перезагрузки страницы.</p>\r\n</dd>\r\n<dt>Динамическая подгрузка данных</dt>\r\n<dd>\r\n<p>Например, дерево, которое при раскрытии узла запрашивает данные у сервера.</p>\r\n</dd>\r\n<dt>Живой поиск</dt>\r\n<dd>\r\n<p><em>Живой поиск</em> – классический пример использования AJAX, взятый на вооружение современными поисковыми системами.</p>\r\n<p>Пользователь начинает печатать поисковую фразу, а JavaScript предлагает возможные варианты, получая список самых вероятных дополнений с сервера.</p>\r\n<figure><div class=\"image\" style=\"width:570px\">\r\n      <div class=\"image__ratio\" style=\"padding-top:27.368421052631582%\"></div>\r\n      <img src=\"/assets/images/source/suggest.png\" alt=\"\" onclick=\"alert(\'этот пример - картинка, см. http://google.com\');\" width=\"570\" height=\"156\" class=\"image__image\">\r\n      </div></figure><p>Код, который это обеспечивает, работает следующим образом.</p>\r\n<ol>\r\n<li>Код активируется примерно при каждом нажатии клавиши, но не чаще чем раз в 100 мс (примерно).</li>\r\n</ol>\r\n</dd>\r\n</dl>\r\n\r\n\r\n	2. Создается скрытый DIV и заполняется ответом сервера:\r\n<pre><code>- Текущий результат подсвечен, можно перемещаться и выбирать\r\n- При нажатии правой стрелки или при клике -- поиск в подрезультатах\r\n3. Результаты запросов кешируются, повторных обращений к серверу не происходит.\r\n</code></pre>\r\n\r\n\r\n4. В Google не только предлагаются варианты, но система тут же инициирует и сам поиск, т.е. не нужно даже нажимать `key:Enter`.\r\n<p><strong>Технически, с помощью AJAX можно обмениваться любыми данными с сервером.</strong></p>\r\n<p>Обычно используются форматы:</p>\r\n<ul>\r\n<li>JSON – для отправки и получения структурированных данных, объектов.</li>\r\n<li>XML – если сервер почему-то работает в формате XML, то можно использовать и его, есть средства.</li>\r\n<li>HTML/текст – можно и просто загрузить с сервера код HTML или текст для показа на странице.</li>\r\n<li>Бинарные данные, файлы – гораздо реже, в современных браузерах есть удобные средства для них.</li>\r\n</ul>\r\n</div></article>'),
(2, 'privacy', 'Политика конфиденциальности', '<div class=\"formatted\">\r\n   <p>Мы ценим вашу конфиденциальность.\r\n      Мы не продаем ваши данные третьим лицам. Мы используем их только по предусмотренному назначению. И мы отправляем вам информационные рассылки только в том случае, если вы на них подписаны.\r\n      Настоящая Политика конфиденциальности (далее «Политика») содержит процедуры и правила в области конфиденциальности Гутниченко Даниила Андреевича, физического лица, представляющего сайт.\r\n      Политика регулирует процесс использования и защиты личной информации, собираемой мной при посещении веб-сайта, использования моих услуг или иного взаимодействия со мной.\r\n   </p>\r\n   <h2>СБОР ИНФОРМАЦИИ</h2>\r\n   <p>Мы собираем личную информацию следующим образом:</p>\r\n   <h3>ИНФОРМАЦИЯ, ПРЕДОСТАВЛЯЕМАЯ НАПРЯМУЮ</h3>\r\n   <p>Мы собираем информацию, которую вы предоставляете нам при:</p>\r\n   <ul>\r\n      <li>приобретении наших товаров или услуг;</li>\r\n      <li>подписке на наши информационные рассылки и списки рассылки;</li>\r\n      <li>заполнении форм, выполнении поиска, размещении информационных материалов на сайте, участии в опросах или использовании любых других функций наших сайтов;</li>\r\n      <li>осуществлении запроса, опубликовании отзывов и комментариев, отправлении корреспонденции или подаче жалобы по телефону, электронной почте, на наших сайтах или по почте;</li>\r\n      <li>регистрации и обновлении учетной записи на наших сайтах (включая доступ через Facebook, LinkedIn, Twitter, Google или открытый IP-провайдер);</li>\r\n      <li>заключении с нами договора;</li>\r\n      <li>подписке на оповещения или уведомления на наших веб-сайтах, подаче заявления о приеме на работу, резюме, сопроводительного письма или профиля в социальных сетях на вакансию, прохождении собеседования, аттестации или при встрече;</li>\r\n      <li>«переходе», «отметке лайком», публикации или общении с использованием наших учетных записей в социальных сетях, включая Facebook, LinkedIn, Twitter, Pinterest, Instagram, Google+, SnapChat и Slack.\r\n         Информация, которую вы нам предоставляете, может включать (в зависимости от обстоятельств):\r\n      </li>\r\n      <li>Информацию, идентифицирующую личность, и контактные данные: должность, имя, адреса, адреса электронной почты, номера телефонов или вашу подпись.</li>\r\n      <li>Данные профиля учетной записи: имя пользователя/отображаемое имя, пароль, предпочтения пользователя, изображение, если вы загрузите его, дополнительные сведения, предоставляемые вами, и, если вы регистрируетесь через учетную запись в социальных сетях, определенную информацию об этой учетной записи.</li>\r\n      <li>Ограниченные платежные данные, если вы осуществляете платежи на нашем сайте. Для проведения платежей мы используем защищенные сторонние сервисы, такие как Stripe или Paypal, поэтому мы не получаем номер вашей кредитной карты, но нам доступны, например, последние четыре цифры карты, ваше имя или страна выдачи карты.\r\n         Если вы подаете заявление о приеме на работу:\r\n      </li>\r\n      <li>Сведения о трудоустройстве и биографические данные, данные об учебе и трудовая биография, документы, подтверждающие квалификацию и профессиональные навыки, проекты и исследования, в которых вы участвуете, рекомендации, подтверждение вашего права на работу в соответствующей стране, номер вашего государственного страхового свидетельства, данные вашего паспорта или другого документа, удостоверяющего личность, текущий размер вашей зарплаты (включая льготы), и любая другая подобная информация, которую вы можете предоставить нам.</li>\r\n      <li>Наглядную и аудио информацию: например, фото- или видеоматериалы, или звукозапись.</li>\r\n      <li>Любые другие сведения, которыми вы решите поделиться с нами: например, любая информация, которую вы предоставляете в переписке, при заполнении опросов, которой вы делитесь через наш веб-сайт или учетные записи в социальных сетях, привязанных к нашему веб-сайту, или любая информация, которую вы решите предоставить лично на различных мероприятиях, встречах, либо по телефону.</li>\r\n   </ul>\r\n   <h3>ИНФОРМАЦИЯ, ПОЛУЧАЕМАЯ С ПОМОЩЬЮ СЕРВЕРНЫХ ТЕХНОЛОГИЙ</h3>\r\n   <p>Мы можем хранить IP-адреса в журналах наших серверов для обеспечения защиты информации в сети, возможности нашей системы противостоять незаконным или злоумышленным действиям, таким как атака типа «отказ в обслуживании».\r\n      Мы также можем хранить дополнительные технические данные о ваших посещениях для диагностики, исправления ошибок в нашем сервисе в случае их возникновения.\r\n   </p>\r\n   <h3>ИНФОРМАЦИЯ, ПОЛУЧАЕМАЯ С ПОМОЩЬЮ ОНЛАЙН-ТЕХНОЛОГИЙ</h3>\r\n   <p>Такие технологии, как куки-файлы, уведомители ошибок, теги, локальные области хранения и скрипты, используются нами и нашими филиалами, а также другими компаниями, такими как сторонние поставщики технологических услуг и поставщики веб-аналитики. Такие технологии облегчают навигацию по нашему веб-сайту и помогают нам управлять контентом на нем, а также используются для анализа трендов, администрирования сайтов, отслеживания движения пользователей по сайту (включая сайт, с которого вы перешли на наш сайт) и сбора демографической информации в пределах нашей базы пользователей.\r\n      Куки-файлы – это небольшие файлы, передаваемые сайтом или его поставщиком услуг на жесткий диск вашего компьютера через веб-браузер (если вы не отключите его), они позволяют системам сайта или поставщика услуг распознавать ваш браузер, собирать и запоминать определенную информацию.\r\n      Они используются для того, чтобы помочь нам понять ваши предпочтения, основываясь на предыдущей или текущей деятельности на сайте, что позволяет нам предоставлять вам более качественные услуги.\r\n      Куки-файлы также помогают нам собирать совокупные данные о посещаемости сайта и обмене данными, чтобы мы могли предложить лучшие функциональные возможности и инструменты сайта в будущем.\r\n      Например, мы используем Google Analytics и Яндекс Метрику для сбора статистической информации о нашем сайте.\r\n   </p>\r\n   <h3>СПЕЦИАЛЬНЫЕ КАТЕГОРИИ ДАННЫХ</h3>\r\n   <p>Специальные категории особо конфиденциальной личной информации требуют более высокого уровня защиты.\r\n      Мы не собираем подобную информацию, когда вы посещаете наш веб-сайт, совершаете покупки, подписываетесь на информационную рассылку или обращаетесь за предоставлением услуг, поскольку для этого нам требуются дополнительные обоснования.\r\n      «Специальные категории данных» включают в себя сведения о вашей расе или этнической принадлежности, религиозных или философских убеждениях, сексуальной жизни, сексуальной ориентации, политических взглядах, членстве в профсоюзах, информацию о вашем здоровье, генетические и биометрические данные, данные о судимости и правонарушениях.\r\n      Обоснования для сбора, хранения и использования данного вида персональной информации:\r\n   </p>\r\n   <ul>\r\n      <li>вы подаете заявление о приеме на работу к нам, в случае, когда это необходимо для выполнения нами своих правовых обязательств или реализации прав в связи с трудоустройством;</li>\r\n      <li>в случае, когда это необходимо по причинам, представляющим значительный общественный интерес;</li>\r\n      <li>в случае, когда это необходимо в связи с судебными исками;</li>\r\n      <li>в случае, когда необходимо защитить ваши интересы (или чьи-либо интересы) и вы не в состоянии дать свое согласие;</li>\r\n      <li>в случае, если вы уже обнародовали информацию.\r\n         В отдельных особых случаях мы можем запросить ваше письменное согласие на использование определенных особо конфиденциальных данных.\r\n         В таком случае мы предоставим вам полную информацию о том, какую информацию мы хотели бы получить, и причину, по которой она нам нужна, чтобы вы могли тщательно обдумать, хотите ли вы давать свое согласие.\r\n      </li>\r\n   </ul>\r\n   <h2>ИСПОЛЬЗОВАНИЕ ЛИЧНОЙ ИНФОРМАЦИИ</h2>\r\n   <h3>ЦЕЛИ СБОРА ПЕРСОНАЛЬНОЙ ИНФОРМАЦИИ</h3>\r\n   <p>Мы используем вашу информацию в следующих целях:</p>\r\n   <ul>\r\n      <li>Для предоставления доступа к нашему веб-сайту удобным и оптимальным способом, с индивидуализированным контентом, актуальным для вас (основываясь на нашем законном интересе в обеспечении эффективного и оптимального представления нашего веб-сайта).</li>\r\n      <li>Для регистрации и обслуживания вашей учетной записи на сайте (основываясь на наших условиях предоставления услуг).</li>\r\n      <li>Для хранения ваших личных настроек.</li>\r\n      <li>Для обработки и выполнения ваших заказов на продукты и услуги (основываясь на условиях выполнения договора, заключенного с вами).</li>\r\n      <li>Для обработки и проведения транзакций и платежей, а также взыскания денежных средств, причитающихся нам (основываясь на условиях выполнения договора, заключенного с вами, и на нашем законном интересе во взыскании причитающихся нам долгов).</li>\r\n      <li>Для осуществления контроля за вашей учетной записью и использованием услуг, обеспечения соблюдения наших соглашений с конечным пользователем, предотвращения и выявления незаконного использования контента и нарушений (основываясь на наших законных интересах в ведении безопасного и законного бизнеса, или в случае, когда у нас есть правовое обязательство).</li>\r\n      <li>Для предоставления вам возможности общения с другими пользователями сайта и клиентами (основываясь на вашем согласии, в случае, когда мы его запрашивали, или основываясь на условиях выполнения договора, заключенного с вами).</li>\r\n      <li>Для организации наших отношений с вами, что будет включать уведомление вас об изменениях наших условий предоставления услуг и политики конфиденциальности, обращение к вам с просьбой оставить свой отзыв или принять участие в опросе (основываясь на условиях выполнения договора, заключенного с вами, для соответствия нашим юридическим обязательствам и нашему законному интересу в поддержании наших учетных данных в актуальном состоянии и изучения использования нашего веб-сайта и услуг).</li>\r\n      <li>Для ведения дел с вами или вашим работодателем, в том числе для связи с вами, а также для управления и содействия улучшению деловых отношений с вами и вашим работодателем (основываясь на условиях выполнения договора, заключенного с вами, и на нашем законном интересе в осуществлении нашей деятельности).</li>\r\n      <li>Для обслуживания и поддержки клиентов, такой как обработка запросов или жалоб на работу веб-сайта, что может включать в случае необходимости обмен информацией с разработчиком, поставщиком информационно-технического обеспечения и платежной системой нашего сайта (основываясь на условиях выполнения договора, заключенного с вами, и на нашем законном интересе в предоставлении соответствующих товаров и услуг пользователям нашего веб-сайта, и для соответствия нашим юридическим обязательствам).</li>\r\n      <li>Для предоставления вам возможности принятия участия в розыгрышах призов, конкурсах и опросах (основываясь на условиях выполнения договора, заключенного с вами, и на нашем законном интересе в изучении использования нашего веб-сайта и услуг, и развитии нашего бизнеса).</li>\r\n      <li>Для работы с вами и осуществления проектов с вами, в том числе обработки любых предложений, которые вы нам представляете (основываясь на условиях выполнения договора, заключенного с вами, и на нашем законном интересе в осуществлении нашей деятельности).</li>\r\n      <li>Для подбора сотрудников, в том числе для обработки любых заявлений о приеме на работу, которые вы предоставляете нам напрямую, через агента или специалиста по подбору персонала, включая предоставление вашей информации нашим сторонним кадровым агентствам (основываясь на условиях выполнения договора, заключенного с вами, и на нашем законном интересе в найме новых сотрудников или подрядчиков).</li>\r\n      <li>Для осуществления маркетинговой деятельности и сообщения вам о наших новостях, событиях, новых функциях веб-сайта, продуктах или услугах, которые, по нашему мнению, могут вас заинтересовать, включая предоставление вашей информации нашим поставщикам маркетинговых услуг (основываясь либо на вашем согласии, в случае, когда мы его запрашивали, либо на наших законных интересах в предоставлении вам маркетинговых связей, в случаях, когда мы можем это делать на законных основаниях).</li>\r\n      <li>Для предоставления вам необходимого контента и рекламы, определения или понимания эффективности рекламы, которую мы вам предоставляем (основываясь на наших законных интересах в изучении использования нашего веб-сайта/услуг, их развитии, развитии нашего бизнеса и информировании о нашей маркетинговой стратегии).</li>\r\n      <li>Для взаимодействия с пользователями на платформах социальных сетей (основываясь на нашем законном интересе в продвижении нашего бренда и взаимодействии с заинтересованными лицами).</li>\r\n      <li>Для проведения анализа данных в целях усовершенствования нашего веб-сайта, продуктов/услуг, маркетинговой деятельности, связей с клиентами и функциональных возможностей (основываясь на наших законных интересах в определении типов клиентов для нашего веб-сайта и услуг, для обеспечения постоянного обновления нашего веб-сайта и его востребованности, развития нашего бизнеса, обеспечения наших клиентов соответствующими видами продуктов и услуг и информирования о нашей бизнес и маркетинговой стратегии).</li>\r\n      <li>Для предоставления советов и рекомендаций посредством предоставления вашей информации определенным третьим лицам, таким как спонсоры и партнеры, чтобы они могли связаться с вами на предмет интересующих вас тем (основываясь либо на вашем согласии, в случае, когда мы его запрашивали, либо на нашем законном интересе в обмене информацией об участниках конференции с нашими со-ведущими и спонсорами).</li>\r\n      <li>Для проведения маркетинговых исследований и тестирования пользователей для оценки уровня удовлетворенности существующими и предлагаемыми продуктами и услугами (основываясь на нашем законном интересе в проведении исследований, предоставлении соответствующих видов продукции и услуг нашим клиентам).</li>\r\n      <li>Для защиты, расследования и противодействия мошеннической, несанкционированной или незаконной деятельности (основываясь на наших законных интересах в ведении безопасного и законного бизнеса, или в тех случаях, когда у нас есть юридические обязательства).</li>\r\n      <li>Для предоставления нам возможности соблюдения наших политик и процедур, и реализации своих законных прав, а также защиты прав, собственности, или безопасности наших сотрудников, а также предоставления вашей информации нашим техническим и юридическим консультантам (основываясь на наших законных интересах в ведении безопасного и законного бизнеса, или в тех случаях, когда у нас есть юридические обязательства).\r\n         Мы будем использовать вашу информацию в целях, перечисленных выше, либо на основании:\r\n      </li>\r\n      <li>вашего согласия (в случаях, когда мы его запрашиваем);</li>\r\n      <li>условий выполнения договора, заключенного с вами, и предоставления вам наших услуг;</li>\r\n      <li>в тех случаях, когда мы должны соблюдать правовые или нормативные обязательства;</li>\r\n      <li>наших законных интересов или интересов третьей стороны (см. раздел ниже для получения дополнительной информации).</li>\r\n   </ul>\r\n   <h3>ЗАКОННЫЕ ИНТЕРЕСЫ</h3>\r\n   <p>Как указано выше, при определенных обстоятельствах мы можем использовать вашу личную информацию для реализации наших законных интересов или законных интересов третьих лиц.\r\n      В тех случаях, когда мы ссылаемся на наши «законные интересы», мы имеем в виду наши законные деловые интересы по ведению и управлению нашим бизнесом и нашими договорными отношениями с вами, включая законные интересы, указанные в разделе выше.\r\n      В тех случаях, когда мы используем вашу информацию в наших законных интересах, мы гарантируем, что мы учитываем любые возможные последствия для вас в результате такого использования.\r\n      Наши законные интересы не имеют преимущественную силу перед вашими, и мы не будем использовать вашу информацию, если посчитаем, что ваши интересы должны иметь преимущественную силу перед нашими, кроме случаев, когда у нас для этого будут другие основания (например, ваше согласие или юридическое обязательство).\r\n      Если у вас есть какие-либо сомнения по поводу обработки нами вашей информации, пожалуйста, обратитесь к разделу «Ваши права» ниже.\r\n   </p>\r\n   <h2>ПЕРЕДАЧА И РАСКРЫТИЕ ЛИЧНОЙ ИНФОРМАЦИИ</h2>\r\n   <p>Мы считаем, что ваша личная информация является важной частью наших договорных отношений с вами и не продаем ее третьим лицам.\r\n      Однако, существуют определенные обстоятельства, при которых мы можем передавать вашу личную информацию определенным третьим лицам, а именно:\r\n   </p>\r\n   <ul>\r\n      <li>Нашим поставщикам услуг, действующим в качестве операторов, осуществляющих обработку данных, и помогающих нам в нашей административной и коммерческой деятельности, или в предоставлении вам любого из наших продуктов/услуг.</li>\r\n      <li>Другим пользователям веб-сайта и клиентам, использующим наши веб-сайты и/или приложения для общения или иного взаимодействия с вами.</li>\r\n      <li>Нашим партнерам, занятым в предоставлении вам услуг.</li>\r\n      <li>Регулирующим и государственным органам, государственным служащим и чиновникам, действующим в качестве операторов, осуществляющих обработку данных, или объединенных контролирующих лиц, требующих при определенных обстоятельствах предоставлять отчетность о деятельности по обработке данных.</li>\r\n      <li>Сторонам в маркетинговой деятельности, которые являются любым определенным третьим лицом, в отношении которого вы дали свое согласие на предоставление нами вашей информации в маркетинговых целях.</li>\r\n      <li>Любому потенциальному покупателю нашего бизнеса или активов, только в том случае, если мы хотим продать какую-либо часть нашего бизнеса или активов.</li>\r\n      <li>Другим третьим лицам, включая юридических, профессиональных или других консультантов, регулирующие органы, суды, правоохранительные органы и государственные учреждения, в тех случаях, когда это необходимо для предоставления нам возможности соблюдения наших законных прав или защиты прав, собственности или безопасности наших сотрудников, или в тех случаях, когда такое раскрытие информации может быть разрешено или требуется по закону.</li>\r\n   </ul>\r\n   <h2>ХРАНЕНИЕ ЛИЧНОЙ ИНФОРМАЦИИ</h2>\r\n   <h3>БЕЗОПАСНОСТЬ</h3>\r\n   <p>Мы используем административные, технические и физические меры для обеспечения безопасности, конфиденциальности и целостности личных данных в отношении их потери, неправильного использования и несанкционированного доступа, разглашения, изменения и уничтожения.\r\n      Мы также придерживаемся политики «Проектируемой конфиденциальности» посредством поиска возможностей максимального сокращения объема вашей личной информации, которую мы храним.\r\n      Используемые нами меры по обеспечению безопасности включают:\r\n   </p>\r\n   <ul>\r\n      <li>обеспечение физической безопасности наших офисов, складов или других объектов;</li>\r\n      <li>обеспечение физической и цифровой безопасности нашего оборудования и устройств посредством использования соответствующей защиты паролем и шифрования;</li>\r\n      <li>использование стандартных протоколов и механизмов безопасности (таких как шифрование с помощью протокола безопасных соединений (SSL)) для передачи конфиденциальных данных, таких как данные кредитной карты;</li>\r\n      <li>ограничение доступа к вашей личной информации тем, кому необходимо использовать ее в процессе своей работы.\r\n         Если у вас есть какие-либо вопросы по защите вашей личной информации, пожалуйста, свяжитесь с нами, воспользовавшись информацией в разделе «Контакты» ниже.\r\n      </li>\r\n   </ul>\r\n   <h3>ХРАНЕНИЕ</h3>\r\n   <p>Мы храним вашу информацию до тех пор, пока это необходимо для предоставления вам услуг, в отношении которых вы отправили нам запрос, или до тех пор, пока нам обоснованно необходимо хранить ее в рамках наших законных деловых целей, например, с целью реализации наших законных прав или в тех случаях, когда нам это разрешено.\r\n      Мы используем политику хранения данных и ищем способы уменьшения объема вашей информации, сохраняемой нами, а также продолжительности ее хранения.\r\n      Пожалуйста, свяжитесь с нами, воспользовавшись информацией в разделе «Контакты» ниже, если хотите получить подробную информацию о наших сроках хранения различных видов ваших личных данных.\r\n   </p>\r\n   <h3>СОДЕЙСТВИЕ В СОХРАНЕНИИ ЛИЧНОЙ ИНФОРМАЦИИ</h3>\r\n   <p>Вы также можете посодействовать в сохранении вашей информации:</p>\r\n   <ul>\r\n      <li>выбрав надежный пароль учетной записи, регулярно изменяя его и используя разные пароли для разных учетных записей в интернете;</li>\r\n      <li>сохраняя в секретности ваш логин и пароль;</li>\r\n      <li>выходя с веб-сайта и закрывая браузер каждый раз, когда завершаете его использование, особенно при использовании общего компьютера;</li>\r\n      <li>сообщая нам, если знаете или подозреваете, что ваша учетная запись была взломана, или если кто-то получил доступ к вашей учетной записи без вашего разрешения;</li>\r\n      <li>обеспечивая защиту устройств, используя последнюю версию операционной системы и необходимое антивирусное программное обеспечение;</li>\r\n      <li>соблюдая бдительность в отношении любых вредоносных электронных писем, которые якобы могут быть от нас.</li>\r\n   </ul>\r\n   <h2>ПЕРЕДАЧА ИНФОРМАЦИИ ЗА РУБЕЖ</h2>\r\n   <p>Наши серверы находятся в Германии, также мы используем сервисы Amazon, расположенные в Соединенных Штатах Америки.\r\n      Наши партнеры и подрядчики, занятые в предоставлении вам услуг (например, сотрудники техподдержки, преподаватели курсов), могут находиться в других странах Европы и Азии.\r\n      Если вы проживаете в Европейском союзе, обратите внимание, что ваши персональные данные будут обрабатываться за пределами Европейской экономической зоны (ЕЭЗ).\r\n      Мы предпримем все необходимые меры для обеспечения надлежащей защиты и обработки вашей информации в соответствии с настоящей Политикой конфиденциальности.\r\n   </p>\r\n   <h2>ВАШИ ПРАВА: ДОСТУП И ТОЧНОСТЬ, ОБНОВЛЕНИЕ, ИСПРАВЛЕНИЕ ИЛИ УДАЛЕНИЕ ИНФОРМАЦИИ</h2>\r\n   <p>Вы имеете определенные права в отношении информации, которую мы храним о вас, в том числе:</p>\r\n   <ul>\r\n      <li>право на получение информации о том, каким образом мы используем вашу информацию, поскольку мы пытаемся добиться этого в данной Политике конфиденциальности;</li>\r\n      <li>право на обращение к нам с просьбой не обрабатывать ваши персональные данные для маркетинговых целей;</li>\r\n      <li>право на обращение к нам с запросом о доступе к информации, которой мы располагаем о вас;</li>\r\n      <li>право на обращение к нам с запросом об исправлении или дополнении любой информации, которую мы храним о вас, если она устарела или неверная;</li>\r\n      <li>право отозвать свое согласие на использование вашей информации (см. разделы выше, где указано в каких случаях мы руководствуемся вашим согласием), что вы можете сделать, связавшись с нами, используя любую информацию, указанную в верхней части данной Политики конфиденциальности;</li>\r\n      <li>право на выдвижение возражений против использования нами вашей информации, основываясь на наших законных интересах (см. разделы выше, где указано в каких случаях мы руководствуемся нашими законными интересами (или интересами третьих лиц)), при наличии каких-либо конкретных обстоятельств, на основании которых вы возражаете против обработки данных;</li>\r\n      <li>право на получение копии любой информации о вас, хранящейся у нас, (или на предоставление запроса на ее передачу другому поставщику услуг) в структурированном, широко используемом, машиночитаемом формате, при определенных обстоятельствах.</li>\r\n      <li>при определенных обстоятельствах, право на обращение к нам с просьбой об ограничении или прекращении обработки, или уничтожении информации, которую мы храним о вас.</li>\r\n   </ul>\r\n   <h3>РЕАЛИЗАЦИЯ ВАШИХ ПРАВ</h3>\r\n   <p>Вы можете реализовать вышеуказанные права, связавшись с нами, воспользовавшись информацией в разделе «Контакты» ниже, и мы выполним ваши запросы, кроме случаев, когда у нас будут законные основания не делать этого.\r\n      Вы можете отказаться от получения информационных рассылок или других сообщений, на которые вы ранее подписались, следуя инструкциям по отписке, содержащимся в каждом информационном письме или сообщении, или связавшись с нами, воспользовавшись информацией в разделе «Контакты» ниже.\r\n      Обратите внимание, что ваш отказ от обработки данных (или отзыв любого ранее данного согласия) может означать, что мы не сможем предоставлять вам наши услуги.\r\n      Даже после того, как вы решите отозвать свое согласие, мы сможем продолжить обработку вашей личной информации, когда это потребуется или будет разрешено законом, в частности, в связи с реализацией и защитой наших законных прав или выполнением наших юридических и нормативных обязательств.\r\n   </p>\r\n   <h3>ОБРАБОТКА ЗАПРОСОВ</h3>\r\n   <p>Нам может потребоваться запросить у вас конкретную информацию, которая поможет нам подтвердить вашу личность и позволит вам осуществить права, изложенные выше.\r\n      Это мера безопасности, гарантирующая, что ваши личные данные не будут раскрыты какому-либо лицу, которое не имеет право на их получение.\r\n      Мы также можем связаться с вами, чтобы получить дополнительную информацию по вашему запросу, чтобы ускорить наш ответ.\r\n   </p>\r\n   <ul>\r\n      <li>Для реализации вышеизложенных прав вам не нужно будет платить никакие сборы.</li>\r\n      <li>Однако, мы можем взимать разумную плату, если ваш запрос явно беспочвенный, повторяющийся или чрезмерно большой.</li>\r\n      <li>В противном случае мы можем отказать в выполнении вашего запроса в данных обстоятельствах.</li>\r\n      <li>Мы постараемся ответить на все обоснованные запросы в течение месяца.</li>\r\n      <li>Иногда ответ может занять больше месяца, если ваш запрос чрезвычайно сложный или вы сделали ряд запросов. В таком случае мы уведомим вас и будем держать в курсе.</li>\r\n   </ul>\r\n   <h2>КОНФИДЕНЦИАЛЬНОСТЬ ДЕТЕЙ</h2>\r\n   <p>Наш сайт не предназначен для детей. Мы не собираем и не сохраняем целенаправленно личную информацию детей младше 13 лет, а в некоторых юрисдикциях – младше 16 лет. Если вы младше 13, пожалуйста, никогда и никоим образом не посещайте наш веб-сайт. Если нам станет известно, что нами была собрана личная информация детей в возрасте до 13 или 16 лет (в соответствующих случаях), мы предпримем соответствующие меры для удаления таких данных.</p>\r\n   <h2>ОБМЕН ДАННЫМИ С ТРЕТЬИМИ ЛИЦАМИ</h2>\r\n   <p>Вы можете предоставлять личную информацию непосредственно третьим лицам в результате взаимодействия с нашим веб-сайтом и другими услугами, предлагаемыми нами.\r\n      Например, наш веб-сайт может содержать контент и ссылки на сторонние веб-сайты, плагины и приложения, управляемые третьими лицами, которые также могут использовать куки-файлы.\r\n      Переход по таким ссылкам или активация таких соединений может позволить третьим лицам собирать данные о вас или обмениваться ими.\r\n      Мы не контролируем такие сторонние веб-сайты или куки-файлы, и не несем ответственность за их заявления о конфиденциальности, и данная Политика конфиденциальности не применяется к ним.\r\n      Пожалуйста, ознакомьтесь с условиями и политикой конфиденциальности соответствующего стороннего веб-сайта, чтобы узнать, как они собирают и используют вашу информацию.\r\n      Пожалуйста, проявляйте ответственность в отношении личной информации других людей при использовании нашего веб-сайта и услуг, доступных на нем.\r\n      Мы не несем ответственность за неправильное использование вами личной информации или за непосредственные отношения между вами и другими лицами, которые имеют место за пределами веб-сайта или не относятся к нашим услугам.\r\n   </p>\r\n   <h2>ИЗМЕНЕНИЯ К ДАННОЙ ПОЛИТИКЕ КОНФИДЕНЦИАЛЬНОСТИ</h2>\r\n   <p>Обратите внимание, что данная Политика может периодически меняться. Мы не будем ограничивать ваши права без вашего согласия.\r\n      При внесении существенных изменений, мы сообщим вам об этом по электронной почте или посредством уведомления на данном веб-сайте, до вступления изменений в силу.\r\n   </p>\r\n</div>'),
(3, 'terms', 'Пользовательское соглашение', '<div class=\"formatted\">\r\n   <p>Добро пожаловать на AJAX.Megalizard.ru!</p>\r\n   <h2>Общие положения</h2>\r\n   <p>Предметом настоящего Пользовательского соглашения (далее «Соглашение») являются отношения между\r\n      Гутниченко Даниилом Андреевичем,\r\n      далее «Админинстратор», являющегося правообладателем Интернет-сервисов, расположенных в сети Интернет на домене megalizard.ru и соответствующих доменах третьего уровня\r\n      (далее в совокупности «Сайт»), и Вами (физическим лицом пользователем сети Интернет), далее «Пользователь», по поводу использования\r\n      Сайта и размещенных в нем сервисов (далее «Сервисы»).\r\n   </p>\r\n   <p>Каждым доступом к Сайту и использованием Сервисов Пользователь соглашается соблюдать условия, описанные в настоящем Пользовательском соглашении.</p>\r\n   <p>Пользователь может ознакомиться с действующей версией Соглашения в сети Интернет по адресу https://ajax.megalizard.ru/?page=terms.\r\n      Соглашение может быть изменено Администратором без какого-либо специального уведомления.\r\n      Новая редакция Соглашения вступает в силу с момента опубликования на Сайте.\r\n   </p>\r\n   <h2>Интеллектуальная собственность</h2>\r\n   <p>Все объекты, доступные на Сайте, в том числе элементы дизайна, текст, графические изображения, иллюстрации, видео, программы,\r\n      базы данных, музыка, звуки и другие объекты, являются объектами исключительных прав Администратора, Пользователей и других правообладателей.\r\n   </p>\r\n   <p>Пользователь не вправе воспроизводить, повторять и копировать, продавать, передавать кому-либо,\r\n      а также использовать для каких-либо коммерческих целей информацию, представленную на Сайте или доступ к ней,\r\n      кроме тех случаев, когда Пользователь получил такое разрешение от Администратора, а также когда Администратором письменно указаны другие условия лицензирования.\r\n   </p>\r\n   <p>Используя Сервисы, позволяющие публиковать информацию на Сайте, а также предлагая информацию для публикации посредством сайта http://github.com\r\n      и не только, Пользователь безвозмездно предоставляет Администратору простую (неисключительную) лицензию\r\n      на воспроизведение информации, её публичный показ и доведение до всеобщего сведения, распространение любыми способами,\r\n      сублицензирование и переработку, на весь срок действия исключительных прав на объекты авторских и (или) смежных прав,\r\n      содержащихся в информации, для использования на территории всех стран мира.\r\n      Пользователь гарантирует наличие права на распоряжение информацией на этих условиях в необходимом объеме.\r\n   </p>\r\n   <p>В случае привлечения Администратора к ответственности или наложения на него взыскания в связи с допущенными Пользователем\r\n      нарушениями прав и/или интересов третьих лиц, а равно установленных законодательством запретов или ограничений,\r\n      такой Пользователь обязан в полном объеме возместить убытки Администратора.\r\n   </p>\r\n   <h2>Отказ от ответственности</h2>\r\n   <p>Администратор вправе прекратить (временно или окончательно) работу Сайта, Сервисов или любых их частей на период обновления,\r\n      профилактического обслуживания или по иной причине, а также изменить их функциональность и внешний вид без предварительного уведомления.\r\n   </p>\r\n   <p>Администратор никак не связан с информацией, размещённой Пользователями при помощи Сервисов, не осуществляет проверку содержания,\r\n      подлинности и безопасности такой информации, а равно её соответствия требованиям действующего законодательства\r\n      и наличия у Пользователей необходимого объема прав на её распространение и/или использование.\r\n   </p>\r\n   <p>Размещая информацию при помощи Сервисов или предлагая её к размещению при помощи сайта http://github.com или другими способами,\r\n      Пользователь самостоятельно несет ответственность за её соответствие требованиям действующего законодательства,\r\n      включая ответственность перед третьим лицами в случаях, когда размещение такой информации на Сайте\r\n      нарушает права и законные интересы третьих лиц, в том числе личные неимущественные права авторов,\r\n      иные интеллектуальные права третьих лиц, и/ или посягает на принадлежащие им нематериальные блага.\r\n   </p>\r\n   <p>Пользователь соглашается с тем, что Администратор не обязан осуществлять предварительную проверку информации любого вида,\r\n      размещаемой Пользователем при помощи Сервисов сайта или предложенной им к размещению посредством сайта http://github.com или иным способом,\r\n      а также на то, что Администратор\r\n      имеет право по своему усмотрению отказать Пользователю в размещении и/или распространении такой информации\r\n      и удалить её. Пользователь должен самостоятельно оценивать все риски, связанные с размещением и распространением такой информации,\r\n      включая оценку её безопасности, полноты и полезности.\r\n   </p>\r\n   <p>Любую информация и/или материалы (в том числе загружаемое ПО, письма, какие- либо инструкции и руководства к действию и т.д.),\r\n      доступ к которым Пользователь получает с использованием Сайта и Сервисов,\r\n      Пользователь может использовать на свой собственный риск и самостоятельно несет ответственность за возможные последствия использования\r\n      указанных информации и/или материалов, в том числе за ущерб, который это может причинить компьютеру Пользователя или третьим лицам,\r\n      за потерю данных или любой другой вред.\r\n   </p>\r\n   <p>Администратор не несет ответственности за любые виды убытков,\r\n      произошедшие вследствие использования Пользователем Сайта, Сервисов и информации с Сайта.\r\n   </p>\r\n   <p>При любых обстоятельствах ответственность Администратора ограничена полученной от Пользователя оплатой\r\n      и возлагается на него исключительно при наличии в его действиях вины.\r\n   </p>\r\n   <p>Администратор имеет право по своему усмотрению заблокировать либо удалить учетную запись Пользователя,\r\n      а также отказать Пользователю в использовании Сайта и Сервисов.\r\n   </p>\r\n   <h2>Заключительная информация</h2>\r\n   <p>Ничто в Соглашении не может пониматься как установление между Пользователем и Администратором\r\n      агентских отношений, отношений товарищества, отношений по совместной деятельности, отношений личного найма,\r\n      либо каких-то иных отношений, прямо не предусмотренных Соглашением.\r\n   </p>\r\n   <p>Признание судом какого-либо положения Соглашения недействительным, или не подлежащим принудительному исполнению, не влечет недействительности или неисполнимости иных положений Соглашения.</p>\r\n   <p>Бездействие со стороны Администратора в случае нарушения Пользователем либо иными лицами положений Соглашения\r\n      не лишает Администратора права предпринять соответствующие действия в защиту своих интересов позднее.\r\n   </p>\r\n   <p>Все споры сторон по настоящему соглашению подлежат разрешению путем переписки и переговоров\r\n      с использованием обязательного досудебного (претензионного) порядка.\r\n      В случае невозможности достичь согласия между сторонами путем переговоров в течение 30 (тридцати) календарных дней\r\n      с момента получения другой Стороной письменной претензии, рассмотрение спора должно быть передано любой заинтересованной\r\n      стороной в суд по месту нахождения Администратора.\r\n   </p>\r\n</div>'),
(4, 'about', 'О проекте', '<div class=\"about-layout\"><div class=\"about-layout__project\"><div class=\"about-layout__text\">Сайт представлен как курсовая работа по предмету \"Web-программирование\". Все материалы заимствованы из интернета и являются всеобщей информацией. Сайт расположен на домене megalizard.ru с поддоменом третьего уровня ajax.megalizard.ru.</div></div><div class=\"about-layout__contact\"><div class=\"about-contacts\" id=\"contact-us\"><h3 class=\"about-contacts__block-title\">Контакты</h3><div class=\"about-contacts__contact\"><div class=\"about-contacts__title\">Даниил Гутниченко</div><a class=\"about-contacts__email\" href=\"mailto:dgutnichenko@mail.ru\">dgutnichenko@mail.ru</a><a class=\"about-contacts__phone\" href=\"tel:+79831302761\">+79831302761</a></div></div></div></div><div class=\"about-issues\"><h2 class=\"about-issues__title\">Баг или опечатка?</h2><p class=\"about-issues__text\">Если у вас есть идеи, как улучшить содержимое сайта, пожалуйста, напишите мне на <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"mailto:dgutnichenko@mail.ru\">электронную почту</a>.</p></div>'),
(6, 'auth', 'Вход', '<div class=\"lessons-list\"><form class=\"login-form__form\" action=\"?page=auth\" method=\"POST\"><div class=\"login-form__line login-form__header\"><h4 class=\"login-form__title\">Вход</h4><div class=\"login-form__header-delimiter\">/</div><div class=\"login-form__header-aside\"><a class=\"login-form__button-link login-form__register\" href=\"?page=reg\">Регистрация</a></div></div><div class=\"login-form__body\"><div class=\"login-form__line login-form__row login-form__row-wrap\"><div class=\"login-form__form-control\"><label class=\"login-form__label\" for=\"auth-email\">Логин:</label><span class=\"text-input login-form__input\"><input class=\"text-input__control\" id=\"auth-email\" name=\"login\" autofocus=\"autofocus\" maxlength=\"30\" tabindex=\"1\" type=\"text\"></span></div><div class=\"login-form__form-control\"><label class=\"login-form__label\" for=\"auth-password\">Пароль:</label><span class=\"text-input text-input_with-aside login-form__input\"><input class=\"text-input__control\" id=\"auth-password\" type=\"password\" name=\"password\" maxlength=\"30\" tabindex=\"2\"></span></div><div class=\"login-form__form-control login-form__submit\"><button class=\"button button_action\" type=\"submit\" tabindex=\"3\" name=\"submit\"><span class=\"button__text\">Войти</span></button></div></div><div class=\"login-form__line login-form__social-logins\"><span>Войдите или зарегистрируйтесь в системе. Если у вас возникли проблемы, обратитесь к <a href=\"mailto:dgutnichenko@mail.ru\">администратору</a>.</span></div></div></form></div>'),
(7, 'reg', 'Регистрация', '<div class=\"lessons-list\"><form class=\"login-form__form\" action=\"?page=reg\" method=\"POST\"><div class=\"login-form__line login-form__header\"><div class=\"login-form__header-aside\"><a class=\"login-form__button-link login-form__register\" href=\"?page=auth\">Вход</a></div><div class=\"login-form__header-delimiter\">/</div><h4 class=\"login-form__title\">Регистрация</h4></div><div class=\"login-form__body\"><div class=\"login-form__line login-form__row login-form__row-wrap\"><div class=\"login-form__form-control\"><label class=\"login-form__label\" for=\"auth-email\">Имя:</label><span class=\"text-input login-form__input\"><input class=\"text-input__control\" id=\"auth-email\" name=\"username\" autofocus=\"autofocus\" maxlength=\"30\" tabindex=\"1\" type=\"text\"></span></div><div class=\"login-form__form-control\"><label class=\"login-form__label\" for=\"auth-email\">Логин:</label><span class=\"text-input login-form__input\"><input class=\"text-input__control\" id=\"auth-email\" name=\"login\" autofocus=\"autofocus\" maxlength=\"30\" tabindex=\"2\" type=\"text\"></span></div><div class=\"login-form__form-control\"><label class=\"login-form__label\" for=\"auth-password\">Пароль:</label><span class=\"text-input text-input_with-aside login-form__input\"><input class=\"text-input__control\" id=\"auth-password\" type=\"password\" name=\"password\" maxlength=\"30\" tabindex=\"3\"></span></div><div class=\"login-form__form-control login-form__submit\"><button class=\"button button_action\" type=\"submit\" tabindex=\"4\" name=\"submit\"><span class=\"button__text\">Войти</span></button></div></div><div class=\"login-form__line login-form__social-logins\"><span>Войдите или зарегистрируйтесь в системе. Если у вас возникли проблемы, обратитесь к <a href=\"mailto:dgutnichenko@mail.ru\">администратору</a>.</span></div></div></form></div>');
INSERT INTO `content` (`id`, `alias_menu`, `title`, `text`) VALUES
(8, 'xmlhttprequest', 'Основы XMLHttpRequest', '<article class=\"formatted\" itemscope=\"\" itemtype=\"http://schema.org/TechArticle\"><meta itemprop=\"name\" content=\"Основы XMLHttpRequest\"><div itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"><meta itemprop=\"email\" content=\"iliakan@gmail.com\"><meta itemprop=\"name\" content=\"Ilya Kantor\"></div><div itemprop=\"articleBody\"><p>Объект <code>XMLHttpRequest</code> (или, как его кратко называют, «XHR») дает возможность из JavaScript делать HTTP-запросы к серверу без перезагрузки страницы.</p>\r\n<p>Несмотря на слово «XML» в названии, <code>XMLHttpRequest</code> может работать с любыми данными, а не только с XML.</p>\r\n<p>Использовать его очень просто.</p>\r\n<h2><a class=\"main__anchor\" name=\"primer-ispolzovaniya\" href=\"#primer-ispolzovaniya\">Пример использования</a></h2><p>Как правило, <code>XMLHttpRequest</code> используют для загрузки данных.</p>\r\n<p>Для начала посмотрим на пример использования, который загружает файл <code>phones.json</code> из текущей директории и выдаёт его содержимое:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:9,&quot;end&quot;:9},{&quot;start&quot;:6,&quot;end&quot;:6},{&quot;start&quot;:3,&quot;end&quot;:4},{&quot;start&quot;:0,&quot;end&quot;:0}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\"block-highlight\" data-start=\"9\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\"block-highlight\" data-start=\"6\">\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\"block-highlight\" data-start=\"3\">\r\n\r\n\r\n<code class=\"mask\">\r\n\r\n</code></code><code class=\"block-highlight\" data-start=\"0\"></code><code class=\" language-javascript\"><code class=\"token comment\">// 1. Создаём новый объект XMLHttpRequest</code>\r\n<code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// 2. Конфигурируем его: GET-запрос на URL \'phones.json\'</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'GET\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'phones.json\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">false</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// 3. Отсылаем запрос</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// 4. Если код ответа сервера не 200, то это ошибка</code>\r\n<code class=\"token keyword\">if</code> <code class=\"token punctuation\">(</code>xhr<code class=\"token punctuation\">.</code>status <code class=\"token operator\">!=</code> <code class=\"token number\">200</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token comment\">// обработать ошибку</code>\r\n  <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> xhr<code class=\"token punctuation\">.</code>status <code class=\"token operator\">+</code> <code class=\"token string\">\': \'</code> <code class=\"token operator\">+</code> xhr<code class=\"token punctuation\">.</code>statusText <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// пример вывода: 404: Not Found</code>\r\n<code class=\"token punctuation\">}</code> <code class=\"token keyword\">else</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token comment\">// вывести результат</code>\r\n  <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> xhr<code class=\"token punctuation\">.</code>responseText <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// responseText -- текст ответа.</code>\r\n<code class=\"token punctuation\">}</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div>\r\n<p>Далее мы более подробно разберём основные методы и свойства объекта <code>XMLHttpRequest</code>, в том числе те, которые были использованы в этом коде.</p>\r\n<h2><a class=\"main__anchor\" name=\"nastroit-open\" href=\"#nastroit-open\">Настроить: open</a></h2><p>Синтаксис:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code>method<code class=\"token punctuation\">,</code> <code class=\"token constant\">URL</code><code class=\"token punctuation\">,</code> <code class=\"token keyword\">async</code><code class=\"token punctuation\">,</code> user<code class=\"token punctuation\">,</code> password<code class=\"token punctuation\">)</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Этот метод – как правило, вызывается первым после создания объекта <code>XMLHttpRequest</code>.</p>\r\n<p>Задаёт основные параметры запроса:</p>\r\n<ul>\r\n<li>\r\n<p><code>method</code> – HTTP-метод. Как правило, используется GET либо POST, хотя доступны и более экзотические, вроде TRACE/DELETE/PUT и т.п.</p>\r\n</li>\r\n<li>\r\n<p><code>URL</code> – адрес запроса. Можно использовать не только http/https, но и другие протоколы, например <code>ftp://</code> и <code>file://</code>.</p>\r\n<p>При этом есть ограничения безопасности, называемые «Same Origin Policy»: запрос со страницы можно отправлять только на тот же <code>протокол://домен:порт</code>, с которого она пришла. В следующих главах мы рассмотрим, как их можно обойти.</p>\r\n</li>\r\n<li>\r\n<p><code>async</code> – если установлено в <code>false</code>, то запрос производится синхронно, если <code>true</code> – асинхронно.</p>\r\n</li>\r\n</ul>\r\n<p>«Синхронный запрос» означает, что после вызова <code>xhr.send()</code> и до ответа сервера главный поток будет «заморожен»: посетитель не сможет взаимодействовать со страницей – прокручивать, нажимать на кнопки и т.п. После получения ответа выполнение продолжится со следующей строки.</p>\r\n<p>«Асинхронный запрос» означает, что браузер отправит запрос, а далее результат нужно будет получить через обработчики событий, которые мы рассмотрим далее.</p>\r\n<ul>\r\n<li><code>user</code>, <code>password</code> – логин и пароль для HTTP-авторизации, если нужны.</li>\r\n</ul>\r\n<div class=\"important important_warn\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Вызов <code>open</code> не открывает соединение</span></div>\r\n            <div class=\"important__content\"><p>Заметим, что вызов <code>open</code>, в противоположность своему названию (<code>open</code> – англ. «открыть») не открывает соединение. Он лишь настраивает запрос, а коммуникация инициируется методом <code>send</code>.</p>\r\n</div></div>\r\n<h2><a class=\"main__anchor\" name=\"otoslat-dannye-send\" href=\"#otoslat-dannye-send\">Отослать данные: send</a></h2><p>Синтаксис:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">[</code>body<code class=\"token punctuation\">]</code><code class=\"token punctuation\">)</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Именно этод метод открывает соединение и отправляет запрос на сервер.</p>\r\n<p>В <code>body</code> находится <em>тело</em> запроса. Не у всякого запроса есть тело, например у GET-запросов тела нет, а у POST – основные данные как раз передаются через <code>body</code>.</p>\r\n<h2><a class=\"main__anchor\" name=\"otmena-abort\" href=\"#otmena-abort\">Отмена: abort</a></h2><p>Вызов <code>xhr.abort()</code> прерывает выполнение запроса.</p>\r\n<h2><a class=\"main__anchor\" name=\"otvet-status-statustext-responsetext\" href=\"#otvet-status-statustext-responsetext\">Ответ: status, statusText, responseText</a></h2><p>Основные свойства, содержащие ответ сервера:</p>\r\n<dl>\r\n<dt><code>status</code></dt>\r\n<dd>HTTP-код ответа: <code>200</code>, <code>404</code>, <code>403</code> и так далее. Может быть также равен <code>0</code>, если сервер не ответил или при запросе на другой домен.</dd>\r\n<dt><code>statusText</code></dt>\r\n<dd>Текстовое описание статуса от сервера: <code>OK</code>, <code>Not Found</code>, <code>Forbidden</code> и так далее.</dd>\r\n<dt><code>responseText</code></dt>\r\n<dd>Текст ответа сервера.</dd>\r\n</dl>\r\n<p>Есть и ещё одно свойство, которое используется гораздо реже:</p>\r\n<dl>\r\n<dt><code>responseXML</code></dt>\r\n<dd>\r\n<p>Если сервер вернул XML, снабдив его правильным заголовком <code>Content-type: text/xml</code>, то браузер создаст из него XML-документ. По нему можно будет делать запросы <code>xhr.responseXml.querySelector(\"...\")</code> и другие.</p>\r\n<p>Оно используется редко, так как обычно используют не XML, а JSON. То есть, сервер возвращает JSON в виде текста, который браузер превращает в объект вызовом <code>JSON.parse(xhr.responseText)</code>.</p>\r\n</dd>\r\n</dl>\r\n<h2><a class=\"main__anchor\" name=\"sinhronnye-i-asinhronnye-zaprosy\" href=\"#sinhronnye-i-asinhronnye-zaprosy\">Синхронные и асинхронные запросы</a></h2><p>Если в методе <code>open</code> установить параметр <code>async</code> равным <code>false</code>, то запрос будет синхронным.</p>\r\n<p>Синхронные вызовы используются чрезвычайно редко, так как блокируют взаимодействие со страницей до окончания загрузки. Посетитель не может даже прокручивать её. Никакой JavaScript не может быть выполнен, пока синхронный вызов не завершён – в общем, в точности те же ограничения как <code>alert</code>.</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:5,&quot;end&quot;:5},{&quot;start&quot;:1,&quot;cols&quot;:[{&quot;start&quot;:31,&quot;end&quot;:36}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\"block-highlight\" data-start=\"5\">\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"1\">\r\n                               <code class=\"mask-inline\">     </code></code><code class=\" language-javascript\"><code class=\"token comment\">// Синхронный запрос</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'GET\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'phones.json\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">false</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// Отсылаем его</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token comment\">// ...весь JavaScript \"подвиснет\", пока запрос не завершится</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Если синхронный вызов занял слишком много времени, то браузер предложит закрыть «зависшую» страницу.</p>\r\n<p>Из-за такой блокировки получается, что нельзя отослать два запроса одновременно. Кроме того, забегая вперёд, заметим, что ряд продвинутых возможностей, таких как возможность делать запросы на другой домен и указывать таймаут, в синхронном режиме не работают.</p>\r\n<p>Из всего вышесказанного уже должно быть понятно, что синхронные запросы используются чрезвычайно редко, а асинхронные – почти всегда.</p>\r\n<p>Для того, чтобы запрос стал асинхронным, укажем параметр <code>async</code> равным <code>true</code>.</p>\r\n<p>Изменённый JS-код:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:6,&quot;end&quot;:7},{&quot;start&quot;:2,&quot;cols&quot;:[{&quot;start&quot;:31,&quot;end&quot;:35}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\"block-highlight\" data-start=\"6\">\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n\r\n</code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"2\">\r\n\r\n                               <code class=\"mask-inline\">    </code></code><code class=\" language-javascript\"><code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'GET\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'phones.json\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// (1)</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onreadystatechange</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code> <code class=\"token comment\">// (3)</code>\r\n  <code class=\"token keyword\">if</code> <code class=\"token punctuation\">(</code>xhr<code class=\"token punctuation\">.</code>readyState <code class=\"token operator\">!=</code> <code class=\"token number\">4</code><code class=\"token punctuation\">)</code> <code class=\"token keyword\">return</code><code class=\"token punctuation\">;</code>\r\n\r\n  button<code class=\"token punctuation\">.</code>innerHTML <code class=\"token operator\">=</code> <code class=\"token string\">\'Готово!\'</code><code class=\"token punctuation\">;</code>\r\n\r\n  <code class=\"token keyword\">if</code> <code class=\"token punctuation\">(</code>xhr<code class=\"token punctuation\">.</code>status <code class=\"token operator\">!=</code> <code class=\"token number\">200</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n    <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code>xhr<code class=\"token punctuation\">.</code>status <code class=\"token operator\">+</code> <code class=\"token string\">\': \'</code> <code class=\"token operator\">+</code> xhr<code class=\"token punctuation\">.</code>statusText<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n  <code class=\"token punctuation\">}</code> <code class=\"token keyword\">else</code> <code class=\"token punctuation\">{</code>\r\n    <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code>xhr<code class=\"token punctuation\">.</code>responseText<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n  <code class=\"token punctuation\">}</code>\r\n\r\n<code class=\"token punctuation\">}</code>\r\n\r\nbutton<code class=\"token punctuation\">.</code>innerHTML <code class=\"token operator\">=</code> <code class=\"token string\">\'Загружаю...\'</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// (2)</code>\r\nbutton<code class=\"token punctuation\">.</code>disabled <code class=\"token operator\">=</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Если в <code>open</code> указан третий аргумент <code>true</code> (или если третьего аргумента нет), то запрос выполняется асинхронно. Это означает, что после вызова <code>xhr.send()</code> в строке <code>(1)</code> код не «зависает», а преспокойно продолжает выполняться, выполняется строка <code>(2)</code>, а результат приходит через событие <code>(3)</code>, мы изучим его чуть позже.</p>\r\n\r\n<h1><a class=\"main__anchor\" name=\"sobytie-readystatechange\" href=\"#sobytie-readystatechange\">Событие readystatechange</a></h1><p>Событие <code>readystatechange</code> происходит несколько раз в процессе отсылки и получения ответа. При этом можно посмотреть «текущее состояние запроса» в свойстве <code>xhr.readyState</code>.</p>\r\n<p>В примере выше мы использовали только состояние <code>4</code> (запрос завершён), но есть и другие.</p>\r\n<p>Все состояния, по <a href=\"http://www.w3.org/TR/XMLHttpRequest/#states\">спецификации</a>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">const</code> unsigned short <code class=\"token constant\">UNSENT</code> <code class=\"token operator\">=</code> <code class=\"token number\">0</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// начальное состояние</code>\r\n<code class=\"token keyword\">const</code> unsigned short <code class=\"token constant\">OPENED</code> <code class=\"token operator\">=</code> <code class=\"token number\">1</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// вызван open</code>\r\n<code class=\"token keyword\">const</code> unsigned short <code class=\"token constant\">HEADERS_RECEIVED</code> <code class=\"token operator\">=</code> <code class=\"token number\">2</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// получены заголовки</code>\r\n<code class=\"token keyword\">const</code> unsigned short <code class=\"token constant\">LOADING</code> <code class=\"token operator\">=</code> <code class=\"token number\">3</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// загружается тело (получен очередной пакет данных)</code>\r\n<code class=\"token keyword\">const</code> unsigned short <code class=\"token constant\">DONE</code> <code class=\"token operator\">=</code> <code class=\"token number\">4</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// запрос завершён</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Запрос проходит их в порядке <code>0</code> → <code>1</code> → <code>2</code> → <code>3</code> → … → <code>3</code> → <code>4</code>, состояние <code>3</code> повторяется при каждом получении очередного пакета данных по сети.</p>\r\n<p>Пример ниже демонстрирует переключение между состояниями. В нём сервер отвечает на запрос <code>digits</code>, пересылая по строке из 1000 цифр раз в секунду.</p>\r\n<div class=\"important important_warn\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Точка разрыва пакетов не гарантирована</span></div>\r\n            <div class=\"important__content\"><p>При состоянии <code>readyState=3</code> (получен очередной пакет) мы можем посмотреть текущие данные в <code>responseText</code> и, казалось бы, могли бы работать с этими данными как с «ответом на текущий момент».</p>\r\n<p>Однако, технически мы не управляем разрывами между сетевыми пакетами. Если протестировать пример выше в локальной сети, то в большинстве браузеров разрывы будут каждые 1000 символов, но в реальности пакет может прерваться на любом байте.</p>\r\n<p>Чем это опасно? Хотя бы тем, что символы русского языка в кодировке UTF-8 кодируются двумя байтами каждый – и разрыв может возникнуть <em>между ними</em>.</p>\r\n<p>Получится, что при очередном <code>readyState</code> в конце <code>responseText</code> будет байт-полсимвола, то есть он не будет корректной строкой – частью ответа! Если в скрипте как-то по-особому это не обработать, то неизбежны проблемы.</p>\r\n</div></div>\r\n<h2><a class=\"main__anchor\" name=\"http-zagolovki\" href=\"#http-zagolovki\">HTTP-заголовки</a></h2><p><code>XMLHttpRequest</code> умеет как указывать свои заголовки в запросе, так и читать присланные в ответ.</p>\r\n<p>Для работы с HTTP-заголовками есть 3 метода:</p>\r\n<dl>\r\n<dt><code>setRequestHeader(name, value)</code></dt>\r\n<dd>\r\n<p>Устанавливает заголовок <code>name</code> запроса со значением <code>value</code>.</p>\r\n<p>Например:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Content-Type\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'application/json\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div></dd>\r\n</dl>\r\n<div class=\"important important_warn\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Ограничения на заголовки</span></div>\r\n            <div class=\"important__content\"><p>Нельзя установить заголовки, которые контролирует браузер, например <code>Referer</code> или <code>Host</code> и ряд других (полный список <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader-method\">тут</a>).</p>\r\n<p>Это ограничение существует в целях безопасности и для контроля корректности запроса.</p>\r\n</div></div>\r\n<div class=\"important important_warn\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Поставленный заголовок нельзя снять</span></div>\r\n            <div class=\"important__content\"><p>Особенностью <code>XMLHttpRequest</code> является то, что отменить <code>setRequestHeader</code> невозможно.</p>\r\n<p>Повторные вызовы лишь добавляют информацию к заголовку, например:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'X-Auth\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'123\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'X-Auth\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'456\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// в результате будет заголовок:</code>\r\n<code class=\"token comment\">// X-Auth: 123, 456</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div></div></div>\r\n<dl>\r\n<dt><code>getResponseHeader(name)</code></dt>\r\n<dd>\r\n<p>Возвращает значение заголовка ответа <code>name</code>, кроме <code>Set-Cookie</code> и <code>Set-Cookie2</code>.</p>\r\n<p>Например:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function\">getResponseHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Content-Type\'</code><code class=\"token punctuation\">)</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div></dd>\r\n<dt><code>getAllResponseHeaders()</code></dt>\r\n<dd>\r\n<p>Возвращает все заголовки ответа, кроме <code>Set-Cookie</code> и <code>Set-Cookie2</code>.</p>\r\n<p>Заголовки возвращаются в виде единой строки, например:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\" language-none\">Cache-Control: max-age=31536000\r\nContent-Length: 4260\r\nContent-Type: image/png\r\nDate: Sat, 08 Sep 2012 16:53:16 GMT</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Между заголовками стоит перевод строки в два символа <code>\"\\r\\n\"</code> (не зависит от ОС), значение заголовка отделено двоеточием с пробелом <code>\": \"</code>. Этот формат задан стандартом.</p>\r\n<p>Таким образом, если хочется получить объект с парами заголовок-значение, то эту строку необходимо разбить и обработать.</p>\r\n</dd>\r\n</dl>\r\n<h2><a class=\"main__anchor\" name=\"taymaut\" href=\"#taymaut\">Таймаут</a></h2><p>Максимальную продолжительность асинхронного запроса можно задать свойством <code>timeout</code>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code>timeout <code class=\"token operator\">=</code> <code class=\"token number\">30000</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// 30 секунд (в миллисекундах)</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>При превышении этого времени запрос будет оборван и сгенерировано событие <code>ontimeout</code>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">ontimeout</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token string\">\'Извините, запрос превысил максимальное время\'</code> <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token punctuation\">}</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><h2><a class=\"main__anchor\" name=\"polnyy-spisok-sobytiy\" href=\"#polnyy-spisok-sobytiy\">Полный список событий</a></h2><p>Современная <a href=\"http://www.w3.org/TR/XMLHttpRequest/#events\">спецификация</a> предусматривает следующие события по ходу обработки запроса:</p>\r\n<ul>\r\n<li><code>loadstart</code> – запрос начат.</li>\r\n<li><code>progress</code> – браузер получил очередной пакет данных, можно прочитать текущие полученные данные в <code>responseText</code>.</li>\r\n<li><code>abort</code> – запрос был отменён вызовом <code>xhr.abort()</code>.</li>\r\n<li><code>error</code> – произошла ошибка.</li>\r\n<li><code>load</code> – запрос был успешно (без ошибок) завершён.</li>\r\n<li><code>timeout</code> – запрос был прекращён по таймауту.</li>\r\n<li><code>loadend</code> – запрос был завершён (успешно или неуспешно)</li>\r\n</ul>\r\n<p>Используя эти события можно более удобно отслеживать загрузку (<code>onload</code>) и ошибку (<code>onerror</code>), а также количество загруженных данных (<code>onprogress</code>).</p>\r\n<p>Ранее мы видели ещё одно событие – <code>readystatechange</code>. Оно появилось гораздо раньше, ещё до появления текущего стандарта.</p>\r\n<p>В современных браузерах от него можно отказаться в пользу других, необходимо лишь, как мы увидим далее,  учесть особенности IE8-9.</p>\r\n<h2><a class=\"main__anchor\" name=\"ie8-9-xdomainrequest\" href=\"#ie8-9-xdomainrequest\">IE8,9: XDomainRequest</a></h2><p>В IE8 и IE9 поддержка <code>XMLHttpRequest</code> ограничена:</p>\r\n<ul>\r\n<li>Не поддерживаются события, кроме <code>onreadystatechange</code>.</li>\r\n<li>Некорректно поддерживается состояние <code>readyState = 3</code>: браузер может сгенерировать его только один раз во время запроса, а не при каждом пакете данных. Кроме того, он не даёт доступ к ответу <code>responseText</code> до того, как он будет до конца получен.</li>\r\n</ul>\r\n<p>Дело в том, что, когда создавались эти браузеры, спецификации были не до конца проработаны. Поэтому разработчики браузера решили добавить свой объект <code>XDomainRequest</code>, который реализовывал часть возможностей современного стандарта.</p>\r\n<p>А обычный <code>XMLHttpRequest</code> решили не трогать, чтобы ненароком не сломать существующий код.</p>\r\n<p>Мы подробнее поговорим про <code>XDomainRequest</code> в главе <a href=\"/xhr-crossdomain\">XMLHttpRequest: кросс-доменные запросы</a>. Пока лишь заметим, что для того, чтобы получить некоторые из современных возможностей в IE8,9 – вместо <code>new XMLHttpRequest()</code> нужно использовать <code>new XDomainRequest</code>.</p>\r\n<p>Кросс-браузерно:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> <code class=\"token constant\">XHR</code> <code class=\"token operator\">=</code> <code class=\"token punctuation\">(</code><code class=\"token string\">\"onload\"</code> <code class=\"token keyword\">in</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">)</code> <code class=\"token operator\">?</code> XMLHttpRequest <code class=\"token punctuation\">:</code> XDomainRequest<code class=\"token punctuation\">;</code>\r\n<code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XHR</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Теперь в IE8,9 поддерживаются события <code>onload</code>, <code>onerror</code> и <code>onprogress</code>. Это именно для IE8,9. Для IE10 обычный <code>XMLHttpRequest</code> уже является полноценным.</p>\r\n<h3><a class=\"main__anchor\" name=\"ie9-i-keshirovanie\" href=\"#ie9-i-keshirovanie\">IE9- и кеширование</a></h3><p>Обычно ответы на запросы <code>XMLHttpRequest</code> кешируются, как и обычные страницы.</p>\r\n<p>Но IE9- по умолчанию кеширует все ответы, не снабжённые антикеш-заголовком. Другие браузеры этого не делают. Чтобы этого избежать, сервер должен добавить в ответ соответствующие антикеш-заголовки, например <code>Cache-Control: no-cache</code>.</p>\r\n<p>Впрочем, использовать заголовки типа <code>Expires</code>, <code>Last-Modified</code> и <code>Cache-Control</code> рекомендуется в любом случае, чтобы дать понять браузеру (не обязательно IE), что ему следует делать.</p>\r\n<p>Альтернативный вариант – добавить в URL запроса случайный параметр, предотвращающий кеширование.</p>\r\n\r\n</div></article>');
INSERT INTO `content` (`id`, `alias_menu`, `title`, `text`) VALUES
(9, 'xhrforms', 'POST, формы и кодировка', '<article class=\"formatted\" itemscope=\"\" itemtype=\"http://schema.org/TechArticle\"><meta itemprop=\"name\" content=\"XMLHttpRequest POST, формы и кодировка\"><div itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"><meta itemprop=\"email\" content=\"iliakan@gmail.com\"><meta itemprop=\"name\" content=\"Ilya Kantor\"></div><div itemprop=\"articleBody\"><p>Во время обычной отправки формы <code>&lt;form&gt;</code> браузер собирает значения её полей, делает из них строку и составляет тело GET/POST-запроса для посылки на сервер.</p>\r\n<p>При отправке данных через <code>XMLHttpRequest</code>, это нужно делать самим, в JS-коде. Большинство проблем и вопросов здесь связано с непониманием, где и какое кодирование нужно осуществлять.</p>\r\n<h2><a class=\"main__anchor\" name=\"kodirovka-urlencoded\" href=\"#kodirovka-urlencoded\">Кодировка urlencoded</a></h2><p>Основной способ кодировки запросов – это <em>urlencoded</em>, то есть – стандартное кодирование URL.</p>\r\n<p>Например, форма:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:2,&quot;cols&quot;:[{&quot;start&quot;:15,&quot;end&quot;:22},{&quot;start&quot;:31,&quot;end&quot;:37}]},{&quot;start&quot;:1,&quot;cols&quot;:[{&quot;start&quot;:15,&quot;end&quot;:19},{&quot;start&quot;:28,&quot;end&quot;:32}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-markup\"><code class=\"block-highlight block-highlight_inline\" data-start=\"2\">\r\n\r\n               <code class=\"mask-inline\">       </code>         <code class=\"mask-inline\">      </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"1\">\r\n               <code class=\"mask-inline\">    </code>         <code class=\"mask-inline\">    </code></code><code class=\" language-markup\"><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>form</code> <code class=\"token attr-name\">action</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>/submit<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">method</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>GET<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>name<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Ivan<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>surname<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Ivanov<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n<code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>form</code><code class=\"token punctuation\">&gt;</code></code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Здесь есть два поля: <code>name=Ivan</code> и <code>surname=Ivanov</code>.</p>\r\n<p>Браузер перечисляет такие пары «имя=значение» через символ амперсанда <code>&amp;</code> и, так как метод GET, итоговый запрос выглядит как <code>/submit?name=Ivan&amp;surname=Ivanov</code>.</p>\r\n<p>Все символы, кроме английских букв, цифр и <code>- _ . ! ~ * \' ( )</code> заменяются на их цифровой код в UTF-8 со знаком %.</p>\r\n<p>Например, пробел заменяется на <code>%20</code>, символ <code>/</code> на <code>%2F</code>, русские буквы кодируются двумя байтами в UTF-8, поэтому, к примеру, <code>Ц</code> заменится на <code>%D0%A6</code>.</p>\r\n<p>Например, форма:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:2,&quot;cols&quot;:[{&quot;start&quot;:15,&quot;end&quot;:22},{&quot;start&quot;:31,&quot;end&quot;:34}]},{&quot;start&quot;:1,&quot;cols&quot;:[{&quot;start&quot;:15,&quot;end&quot;:19},{&quot;start&quot;:28,&quot;end&quot;:34}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-markup\"><code class=\"block-highlight block-highlight_inline\" data-start=\"2\">\r\n\r\n               <code class=\"mask-inline\">       </code>         <code class=\"mask-inline\">   </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"1\">\r\n               <code class=\"mask-inline\">    </code>         <code class=\"mask-inline\">      </code></code><code class=\" language-markup\"><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>form</code> <code class=\"token attr-name\">action</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>/submit<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">method</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>GET<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>name<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Виктор<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>surname<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Цой<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n<code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>form</code><code class=\"token punctuation\">&gt;</code></code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Будет отправлена так: <code>/submit?name=%D0%92%D0%B8%D0%BA%D1%82%D0%BE%D1%80&amp;surname=%D0%A6%D0%BE%D0%B9</code>.</p>\r\n\r\n<p>Эта кодировка используется в основном для метода GET, то есть для передачи параметра в строке запроса. По стандарту строка запроса не может содержать произвольные Unicode-символы, поэтому они кодируются как показано выше.</p>\r\n<h2><a class=\"main__anchor\" name=\"get-zapros\" href=\"#get-zapros\">GET-запрос</a></h2><p>Формируя XMLHttpRequest, мы должны формировать запрос «руками», кодируя поля функцией <code>encodeURIComponent</code>.</p>\r\n<p>Например, для посылки GET-запроса с параметрами <code>name</code> и <code>surname</code>, аналогично форме выше, их необходимо закодировать так:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token comment\">// Передаём name и surname в параметрах запроса</code>\r\n\r\n<code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token keyword\">var</code> params <code class=\"token operator\">=</code> <code class=\"token string\">\'name=\'</code> <code class=\"token operator\">+</code> <code class=\"token function\">encodeURIComponent</code><code class=\"token punctuation\">(</code>name<code class=\"token punctuation\">)</code> <code class=\"token operator\">+</code>\r\n  <code class=\"token string\">\'&amp;surname=\'</code> <code class=\"token operator\">+</code> <code class=\"token function\">encodeURIComponent</code><code class=\"token punctuation\">(</code>surname<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"GET\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'/submit?\'</code> <code class=\"token operator\">+</code> params<code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code>onreadystatechange <code class=\"token operator\">=</code> <code class=\"token operator\">...</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><div class=\"important important_smart\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Прочие заголовки</span></div>\r\n            <div class=\"important__content\"><p>Браузер автоматически добавит к запросу важнейшие HTTP-заголовки, такие как <code>Content-Length</code> и <code>Connection</code>.</p>\r\n<p>По спецификации браузер запрещает их явную установку, как и некоторых других низкоуровневых HTTP-заголовков, которые могли бы ввести в заблуждение сервер относительно того, кто и сколько данных ему прислал, например <code>Referer</code>. Это сделано в целях контроля правильности запроса и для безопасности.</p>\r\n</div></div>\r\n<div class=\"important important_smart\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Сообщаем про AJAX</span></div>\r\n            <div class=\"important__content\"><p>Запрос, отправленный кодом выше через <code>XMLHttpRequest</code>, никак не отличается от обычной отправки формы. Сервер не в состоянии их отличить.</p>\r\n<p>Поэтому в некоторых фреймворках, чтобы сказать серверу, что это AJAX, добавляют специальный заголовок, например такой:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"X-Requested-With\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\"XMLHttpRequest\"</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div></div></div>\r\n<h2><a class=\"main__anchor\" name=\"post-s-urlencoded\" href=\"#post-s-urlencoded\">POST с urlencoded</a></h2><p>В методе POST параметры передаются не в URL, а в теле запроса. Оно указывается в вызове <code>send(body)</code>.</p>\r\n<p>В стандартных HTTP-формах для метода POST доступны <a href=\"https://html.spec.whatwg.org/multipage/forms.html#submit-body\">три кодировки</a>, задаваемые через атрибут <code>enctype</code>:</p>\r\n<ul>\r\n<li><code>application/x-www-form-urlencoded</code></li>\r\n<li><code>multipart/form-data</code></li>\r\n<li><code>text-plain</code></li>\r\n</ul>\r\n<p>В зависимости от <code>enctype</code> браузер кодирует данные соответствующим способом перед отправкой на сервер.</p>\r\n<p>В случае с <code>XMLHttpRequest</code> мы, вообще говоря, не обязаны использовать ни один из этих способов. Главное, чтобы сервер наш запрос понял. Но обычно проще всего выбрать какой-то из стандартных.</p>\r\n<p>В частности, при POST обязателен заголовок <code>Content-Type</code>, содержащий кодировку. Это указание для сервера – как обрабатывать (раскодировать) пришедший запрос.</p>\r\n<p>Для примера отправим запрос в кодировке <code>application/x-www-form-urlencoded</code>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token keyword\">var</code> body <code class=\"token operator\">=</code> <code class=\"token string\">\'name=\'</code> <code class=\"token operator\">+</code> <code class=\"token function\">encodeURIComponent</code><code class=\"token punctuation\">(</code>name<code class=\"token punctuation\">)</code> <code class=\"token operator\">+</code>\r\n  <code class=\"token string\">\'&amp;surname=\'</code> <code class=\"token operator\">+</code> <code class=\"token function\">encodeURIComponent</code><code class=\"token punctuation\">(</code>surname<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"POST\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'/submit\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Content-Type\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'application/x-www-form-urlencoded\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code>onreadystatechange <code class=\"token operator\">=</code> <code class=\"token operator\">...</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>body<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><div class=\"important important_warn\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Только UTF-8</span></div>\r\n            <div class=\"important__content\"><p>Всегда используется только кодировка UTF-8, независимо от языка и кодировки страницы.</p>\r\n<p>Если сервер вдруг ожидает данные в другой кодировке, к примеру windows-1251, то их нужно будет перекодировать.</p>\r\n</div></div>\r\n<h2><a class=\"main__anchor\" name=\"kodirovka-multipart-form-data\" href=\"#kodirovka-multipart-form-data\">Кодировка multipart/form-data</a></h2><p>Кодировка urlencoded за счёт замены символов на <code>%код</code> может сильно «раздуть» общий объём пересылаемых данных. Поэтому для пересылки файлов используется другая кодировка: <a href=\"http://ru.wikipedia.org/wiki/Multipart_form-data\">multipart/form-data</a>.</p>\r\n<p>В этой кодировке поля пересылаются одно за другим, через строку-разделитель.</p>\r\n<p>Чтобы использовать этот способ, нужно указать его в атрибуте <code>enctype</code> и метод должен быть POST:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:2,&quot;cols&quot;:[{&quot;start&quot;:15,&quot;end&quot;:22},{&quot;start&quot;:31,&quot;end&quot;:34}]},{&quot;start&quot;:1,&quot;cols&quot;:[{&quot;start&quot;:15,&quot;end&quot;:19},{&quot;start&quot;:28,&quot;end&quot;:34}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-markup\"><code class=\"block-highlight block-highlight_inline\" data-start=\"2\">\r\n\r\n               <code class=\"mask-inline\">       </code>         <code class=\"mask-inline\">   </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"1\">\r\n               <code class=\"mask-inline\">    </code>         <code class=\"mask-inline\">      </code></code><code class=\" language-markup\"><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>form</code> <code class=\"token attr-name\">action</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>/submit<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">method</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>POST<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">enctype</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>multipart/form-data<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>name<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Виктор<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>surname<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Цой<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n<code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>form</code><code class=\"token punctuation\">&gt;</code></code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Форма при такой кодировке будет выглядеть примерно так:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:10,&quot;cols&quot;:[{&quot;start&quot;:0,&quot;end&quot;:3}]},{&quot;start&quot;:8,&quot;cols&quot;:[{&quot;start&quot;:38,&quot;end&quot;:45}]},{&quot;start&quot;:6,&quot;cols&quot;:[{&quot;start&quot;:0,&quot;end&quot;:6}]},{&quot;start&quot;:4,&quot;cols&quot;:[{&quot;start&quot;:38,&quot;end&quot;:42}]},{&quot;start&quot;:1,&quot;cols&quot;:[{&quot;start&quot;:14,&quot;end&quot;:59}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight block-highlight_inline\" data-start=\"10\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask-inline\">   </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"8\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                      <code class=\"mask-inline\">       </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"6\">\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask-inline\">      </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"4\">\r\n\r\n\r\n\r\n                                      <code class=\"mask-inline\">    </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"1\">\r\n              <code class=\"mask-inline\">                                             </code></code><code class=\" language-none\">...Заголовки...\r\nContent-Type: multipart/form-data; boundary=RaNdOmDeLiMiTeR\r\n\r\n--RaNdOmDeLiMiTeR\r\nContent-Disposition: form-data; name=\"name\"\r\n\r\nВиктор\r\n--RaNdOmDeLiMiTeR\r\nContent-Disposition: form-data; name=\"surname\"\r\n\r\nЦой\r\n--RaNdOmDeLiMiTeR--</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>…То есть, поля передаются одно за другим, значения не кодируются, а чтобы было чётко понятно, какое значение где – поля разделены случайно сгенерированной строкой, которую называют «boundary» (англ. граница), в примере выше это <code>RaNdOmDeLiMiTeR</code>:</p>\r\n<p>Сервер видит заголовок <code>Content-Type: multipart/form-data</code>, читает из него границу и раскодирует поля формы.</p>\r\n<p>Такой способ используется в первую очередь при пересылке файлов, так перекодировка мегабайтов через urlencoded существенно загрузила бы браузер. Да и объём данных после неё сильно вырос бы.</p>\r\n<p>Однако, никто не мешает использовать эту кодировку всегда для POST запросов. Для GET доступна только urlencoded.</p>\r\n<h2><a class=\"main__anchor\" name=\"post-s-multipart-form-data\" href=\"#post-s-multipart-form-data\">POST с multipart/form-data</a></h2><p>Сделать POST-запрос в кодировке <code>multipart/form-data</code> можно и через XMLHttpRequest.</p>\r\n<p>Достаточно указать в заголовке <code>Content-Type</code> кодировку и границу, и далее сформировать тело запроса, удовлетворяющее требованиям кодировки.</p>\r\n<p>Пример кода для того же запроса, что и раньше, теперь в кодировке <code>multipart/form-data</code>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> data <code class=\"token operator\">=</code> <code class=\"token punctuation\">{</code>\r\n  name<code class=\"token punctuation\">:</code> <code class=\"token string\">\'Виктор\'</code><code class=\"token punctuation\">,</code>\r\n  surname<code class=\"token punctuation\">:</code> <code class=\"token string\">\'Цой\'</code>\r\n<code class=\"token punctuation\">}</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token keyword\">var</code> boundary <code class=\"token operator\">=</code> <code class=\"token function\">String</code><code class=\"token punctuation\">(</code>Math<code class=\"token punctuation\">.</code><code class=\"token function\">random</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">.</code><code class=\"token function\">slice</code><code class=\"token punctuation\">(</code><code class=\"token number\">2</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token keyword\">var</code> boundaryMiddle <code class=\"token operator\">=</code> <code class=\"token string\">\'--\'</code> <code class=\"token operator\">+</code> boundary <code class=\"token operator\">+</code> <code class=\"token string\">\'\\r\\n\'</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token keyword\">var</code> boundaryLast <code class=\"token operator\">=</code> <code class=\"token string\">\'--\'</code> <code class=\"token operator\">+</code> boundary <code class=\"token operator\">+</code> <code class=\"token string\">\'--\\r\\n\'</code>\r\n\r\n<code class=\"token keyword\">var</code> body <code class=\"token operator\">=</code> <code class=\"token punctuation\">[</code><code class=\"token string\">\'\\r\\n\'</code><code class=\"token punctuation\">]</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token keyword\">for</code> <code class=\"token punctuation\">(</code><code class=\"token keyword\">var</code> key <code class=\"token keyword\">in</code> data<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token comment\">// добавление поля</code>\r\n  body<code class=\"token punctuation\">.</code><code class=\"token function\">push</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Content-Disposition: form-data; name=\"\'</code> <code class=\"token operator\">+</code> key <code class=\"token operator\">+</code> <code class=\"token string\">\'\"\\r\\n\\r\\n\'</code> <code class=\"token operator\">+</code> data<code class=\"token punctuation\">[</code>key<code class=\"token punctuation\">]</code> <code class=\"token operator\">+</code> <code class=\"token string\">\'\\r\\n\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token punctuation\">}</code>\r\n\r\nbody <code class=\"token operator\">=</code> body<code class=\"token punctuation\">.</code><code class=\"token function\">join</code><code class=\"token punctuation\">(</code>boundaryMiddle<code class=\"token punctuation\">)</code> <code class=\"token operator\">+</code> boundaryLast<code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// Тело запроса готово, отправляем</code>\r\n\r\n<code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'POST\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'/submit\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Content-Type\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'multipart/form-data; boundary=\'</code> <code class=\"token operator\">+</code> boundary<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onreadystatechange</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token keyword\">if</code> <code class=\"token punctuation\">(</code><code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>readyState <code class=\"token operator\">!=</code> <code class=\"token number\">4</code><code class=\"token punctuation\">)</code> <code class=\"token keyword\">return</code><code class=\"token punctuation\">;</code>\r\n\r\n  <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>responseText <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token punctuation\">}</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>body<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Тело запроса будет иметь вид, описанный выше, то есть поля через разделитель.</p>\r\n<div class=\"important important_smart\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Отправка файла</span></div>\r\n            <div class=\"important__content\"><p>Можно создать запрос, который сервер воспримет как загрузку файла.</p>\r\n<p>Для добавления файла нужно использовать тот же код, что выше, модифицировав заголовки перед полем, которое является файлом, так:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">Content<code class=\"token operator\">-</code>Disposition<code class=\"token punctuation\">:</code> form<code class=\"token operator\">-</code>data<code class=\"token punctuation\">;</code> name<code class=\"token operator\">=</code><code class=\"token string\">\"myfile\"</code><code class=\"token punctuation\">;</code> filename<code class=\"token operator\">=</code><code class=\"token string\">\"pic.jpg\"</code>\r\nContent<code class=\"token operator\">-</code>Type<code class=\"token punctuation\">:</code> image<code class=\"token operator\">/</code><code class=\"token function\">jpeg</code>\r\n<code class=\"token punctuation\">(</code>пустая строка<code class=\"token punctuation\">)</code>\r\nсодержимое файла</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div></div></div>\r\n<h2><a class=\"main__anchor\" name=\"formdata\" href=\"#formdata\">FormData</a></h2><p>Современные браузеры, исключая IE9- (впрочем, есть полифилл), поддерживают встроенный объект <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects\">FormData</a>, который кодирует формы для отправки на сервер.</p>\r\n<p>Это очень удобно. Например:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:15,&quot;end&quot;:15},{&quot;start&quot;:7,&quot;end&quot;:7}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-markup\"><code class=\"block-highlight\" data-start=\"15\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\"block-highlight\" data-start=\"7\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\" language-markup\"><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>form</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>person<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>name<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Виктор<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>surname<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Цой<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>\r\n<code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>form</code><code class=\"token punctuation\">&gt;</code></code>\r\n\r\n<code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>script</code><code class=\"token punctuation\">&gt;</code></code><code class=\"token script language-javascript\">\r\n  <code class=\"token comment\">// создать объект для формы</code>\r\n  <code class=\"token keyword\">var</code> formData <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">FormData</code><code class=\"token punctuation\">(</code>document<code class=\"token punctuation\">.</code>forms<code class=\"token punctuation\">.</code>person<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n  <code class=\"token comment\">// добавить к пересылке ещё пару ключ - значение</code>\r\n  formData<code class=\"token punctuation\">.</code><code class=\"token function\">append</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"patronym\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\"Робертович\"</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n  <code class=\"token comment\">// отослать</code>\r\n  <code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n  xhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"POST\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\"/url\"</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n  xhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>formData<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n</code><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>script</code><code class=\"token punctuation\">&gt;</code></code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Этот код отправит на сервер форму с полями <code>name</code>, <code>surname</code> и <code>patronym</code>.</p>\r\n<p>Интерфейс:</p>\r\n<ul>\r\n<li>Конструктор <code>new FormData([form])</code> вызывается либо без аргументов, либо с DOM-элементом формы.</li>\r\n<li>Метод <code>formData.append(name, value)</code> добавляет данные к форме.</li>\r\n</ul>\r\n<p>Объект <code>formData</code> можно сразу отсылать, интеграция <code>FormData</code> с <code>XMLHttpRequest</code> встроена в браузер. Кодировка при этом будет <code>multipart/form-data</code>.</p>\r\n<h2><a class=\"main__anchor\" name=\"drugie-kodirovki\" href=\"#drugie-kodirovki\">Другие кодировки</a></h2><p>XMLHttpRequest сам по себе не ограничивает кодировку и формат пересылаемых данных.</p>\r\n<p>Поэтому для обмена данными часто используется формат JSON:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:12,&quot;end&quot;:13}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\"block-highlight\" data-start=\"12\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n\r\n</code></code><code class=\" language-javascript\"><code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token keyword\">var</code> json <code class=\"token operator\">=</code> <code class=\"token constant\">JSON</code><code class=\"token punctuation\">.</code><code class=\"token function\">stringify</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">{</code>\r\n  name<code class=\"token punctuation\">:</code> <code class=\"token string\">\"Виктор\"</code><code class=\"token punctuation\">,</code>\r\n  surname<code class=\"token punctuation\">:</code> <code class=\"token string\">\"Цой\"</code>\r\n<code class=\"token punctuation\">}</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"POST\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'/submit\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Content-type\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'application/json; charset=utf-8\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code>onreadystatechange <code class=\"token operator\">=</code> <code class=\"token operator\">...</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// Отсылаем объект в формате JSON и с Content-Type application/json</code>\r\n<code class=\"token comment\">// Сервер должен уметь такой Content-Type принимать и раскодировать</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>json<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><h2><a class=\"main__anchor\" name=\"itogo\" href=\"#itogo\">Итого</a></h2><ul>\r\n<li>У форм есть две основные кодировки: <code>application/x-www-form-urlencoded</code> – по умолчанию и <code>multipart/form-data</code> – для POST запросов, если явно указана в <code>enctype</code>. Вторая кодировка обычно используется для больших данных и только для тела запроса.</li>\r\n<li>Для составления запроса в <code>application/x-www-form-urlencoded</code> используется функция <code>encodeURIComponent</code>.</li>\r\n<li>Для отправки запроса в <code>multipart/form-data</code> – объект <code>FormData</code>.</li>\r\n<li>Для обмена данными JS ↔ сервер можно использовать и просто JSON, желательно с указанием кодировки в заголовке <code>Content-Type</code>.</li>\r\n</ul>\r\n<p>В XMLHttpRequest можно использовать и другие HTTP-методы, например PUT, DELETE, TRACE. К ним применимы все те же принципы, что описаны выше.</p>\r\n</div></article>');
INSERT INTO `content` (`id`, `alias_menu`, `title`, `text`) VALUES
(10, 'xhrcrossdomain', 'Кросс-доменные запросы', '<article class=\"formatted\" itemscope=\"\" itemtype=\"http://schema.org/TechArticle\"><meta itemprop=\"name\" content=\"XMLHttpRequest: кросс-доменные запросы\"><div itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"><meta itemprop=\"email\" content=\"iliakan@gmail.com\"><meta itemprop=\"name\" content=\"Ilya Kantor\"></div><div itemprop=\"articleBody\"><p>Обычно запрос <code>XMLHttpRequest</code> может делать запрос только в рамках текущего сайта. При попытке использовать другой домен/порт/протокол – браузер выдаёт ошибку.</p>\r\n<p>Существует современный стандарт <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">XMLHttpRequest</a>, он ещё в состоянии черновика, но предусматривает кросс-доменные запросы и многое другое.</p>\r\n<p>Большинство возможностей этого стандарта уже поддерживаются всеми браузерами, но увы, не в IE9-.</p>\r\n<p>Впрочем, частично кросс-доменные запросы поддерживаются, начиная с IE8, только вместо <code>XMLHttpRequest</code> нужно использовать объект <a href=\"http://msdn.microsoft.com/en-us/library/ie/cc288060.aspx\">XDomainRequest</a>.</p>\r\n<h2><a class=\"main__anchor\" name=\"cors\" href=\"#cors\">Кросс-доменные запросы</a></h2><p>Разберём кросс-доменные запросы на примере кода:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token comment\">// (1)</code>\r\n<code class=\"token keyword\">var</code> <code class=\"token constant\">XHR</code> <code class=\"token operator\">=</code> <code class=\"token punctuation\">(</code><code class=\"token string\">\"onload\"</code> <code class=\"token keyword\">in</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">)</code> <code class=\"token operator\">?</code> XMLHttpRequest <code class=\"token punctuation\">:</code> XDomainRequest<code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XHR</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\n<code class=\"token comment\">// (2) запрос на другой домен :)</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'GET\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'http://anywhere.com/request\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onload</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>responseText <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token punctuation\">}</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onerror</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>\r\n  <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token string\">\'Ошибка \'</code> <code class=\"token operator\">+</code> <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>status <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n<code class=\"token punctuation\">}</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><ol>\r\n<li>Мы создаём <code>XMLHttpRequest</code> и проверяем, поддерживает ли он событие <code>onload</code>. Если нет, то это старый <code>XMLHttpRequest</code>, значит это IE8,9, и используем <code>XDomainRequest</code>.</li>\r\n<li>Запрос на другой домен отсылается просто указанием соответствующего URL в <code>open</code>. Он обязательно должен быть асинхронным, в остальном – никаких особенностей.</li>\r\n</ol>\r\n<h2><a class=\"main__anchor\" name=\"kontrol-bezopasnosti\" href=\"#kontrol-bezopasnosti\">Контроль безопасности</a></h2><p>Кросс-доменные запросы проходят специальный контроль безопасности, цель которого – не дать злым хакерам™ завоевать интернет.</p>\r\n<p>Серьёзно. Разработчики стандарта предусмотрели все заслоны, чтобы «злой хакер» не смог, воспользовавшись новым стандартом, сделать что-то принципиально отличное от того, что и так мог раньше и, таким образом, «сломать» какой-нибудь сервер, работающий по-старому стандарту и не ожидающий ничего принципиально нового.</p>\r\n<p>Давайте, на минуточку, вообразим, что появился стандарт, который даёт, без ограничений, возможность делать любой странице HTTP-запросы куда угодно, какие угодно.</p>\r\n<p>Как сможет этим воспользоваться злой хакер?</p>\r\n<p>Он сделает свой сайт, например <code>http://evilhacker.com</code> и заманит туда посетителя (а может посетитель попадёт на «злонамеренную» страницу и по ошибке – не так важно).</p>\r\n<p>Когда посетитель зайдёт на <code>http://evilhacker.com</code>, он автоматически запустит JS-скрипт на странице. Этот скрипт сделает HTTP-запрос на почтовый сервер, к примеру, <code>http://gmail.com</code>. А ведь обычно HTTP-запросы идут с куками посетителя и другими авторизующими заголовками.</p>\r\n<p>Поэтому хакер сможет написать на <code>http://evilhacker.com</code> код, который, сделав GET-запрос на <code>http://gmail.com</code>, получит информацию из почтового ящика посетителя. Проанализирует её, сделает ещё пачку POST-запросов для отправки писем от имени посетителя. Затем настанет очередь онлайн-банка и так далее.</p>\r\n<p>Спецификация <a href=\"http://www.w3.org/TR/cors/\">CORS</a> налагает специальные ограничения на запросы, которые призваны не допустить подобного апокалипсиса.</p>\r\n<p>Запросы в ней делятся на два вида.</p>\r\n<p><a href=\"http://www.w3.org/TR/cors/#terminology\">Простыми</a> считаются запросы, если они удовлетворяют следующим двум условиям:</p>\r\n<ol>\r\n<li><a href=\"http://www.w3.org/TR/cors/#simple-method\">Простой метод</a>: GET, POST или HEAD</li>\r\n<li><a href=\"http://www.w3.org/TR/cors/#simple-header\">Простые заголовки</a> – только из списка:</li>\r\n</ol>\r\n<ul>\r\n<li><code>Accept</code></li>\r\n<li><code>Accept-Language</code></li>\r\n<li><code>Content-Language</code></li>\r\n<li><code>Content-Type</code> со значением <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> или <code>text/plain</code>.</li>\r\n</ul>\r\n<p>«Непростыми» считаются все остальные, например, запрос с методом <code>PUT</code> или с заголовком <code>Authorization</code> не подходит под ограничения выше.</p>\r\n<p>Принципиальная разница между ними заключается в том, что «простой» запрос можно сформировать и отправить на сервер и без XMLHttpRequest, например при помощи HTML-формы.</p>\r\n<p>То есть, злой хакер на странице <code>http://evilhacker.com</code> и до появления CORS мог отправить произвольный GET-запрос куда угодно. Например, если создать и добавить в документ элемент <code>&lt;script src=\"любой url\"&gt;</code>, то браузер сделает GET-запрос на этот URL.</p>\r\n<p>Аналогично, злой хакер и ранее мог на своей странице объявить и, при помощи JavaScript, отправить HTML-форму с методом GET/POST и кодировкой <code>multipart/form-data</code>. А значит, даже старый сервер наверняка предусматривает возможность таких атак и умеет от них защищаться.</p>\r\n<p>А вот запросы с нестандартными заголовками или с методом <code>DELETE</code> таким образом не создать. Поэтому старый сервер может быть к ним не готов. Или, к примеру, он может полагать, что такие запросы веб-страница в принципе не умеет присылать, значит они пришли из привилегированного приложения, и дать им слишком много прав.</p>\r\n<p>Поэтому при посылке «непростых» запросов нужно специальным образом спросить у сервера, согласен ли он в принципе на подобные кросс-доменные запросы или нет? И, если сервер не ответит, что согласен – значит, нет.</p>\r\n<div class=\"summary\"><div class=\"summary__content\"><p>В спецификации CORS, как мы увидим далее, есть много деталей, но все они объединены единым принципом: новые возможности доступны только с явного согласия сервера (по умолчанию – нет).</p>\r\n</div></div>\r\n<h2><a class=\"main__anchor\" name=\"cors-dlya-prostyh-zaprosov\" href=\"#cors-dlya-prostyh-zaprosov\">CORS для простых запросов</a></h2><p>В кросс-доменный запрос браузер автоматически добавляет заголовок <code>Origin</code>, содержащий домен, с которого осуществлён запрос.</p>\r\n<p>В случае запроса на <code>http://anywhere.com/request</code> с <code>http://javascript.ru/page</code> заголовки будут примерно такие:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:2,&quot;end&quot;:2}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight\" data-start=\"2\">\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\" language-none\">GET /request\r\nHost:anywhere.com\r\nOrigin:http://javascript.ru\r\n...</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Сервер должен, со своей стороны, ответить специальными заголовками, разрешает ли он такой запрос к себе.</p>\r\n<p>Если сервер разрешает кросс-доменный запрос с этого домена – он должен добавить к ответу заголовок <code>Access-Control-Allow-Origin</code>, содержащий домен запроса (в данном случае «javascript.ru») или  звёздочку <code>*</code>.</p>\r\n<p><strong>Только при наличии такого заголовка в ответе – браузер сочтёт запрос успешным, а иначе JavaScript получит ошибку.</strong></p>\r\n<figure><div class=\"image\" style=\"width:610px\">\r\n      <div class=\"image__ratio\" style=\"padding-top:67.37704918032786%\"></div>\r\n      <img src=\"https://learn.javascript.ru/article/xhr-crossdomain/xhr-another-domain@2x.png\" alt=\"\" width=\"610\" height=\"411\" class=\"image__image\">\r\n      </div></figure><p>То есть, ответ сервера может быть примерно таким:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:2,&quot;end&quot;:2}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight\" data-start=\"2\">\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\" language-none\">HTTP/1.1 200 OK\r\nContent-Type:text/html; charset=UTF-8\r\nAccess-Control-Allow-Origin: http://javascript.ru</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Если <code>Access-Control-Allow-Origin</code> нет, то браузер считает, что разрешение не получено, и завершает запрос с ошибкой.</p>\r\n<p>При таких запросах не передаются куки и заголовки HTTP-авторизации. Параметры <code>user</code> и <code>password</code> в методе <code>open</code> игнорируются. Мы рассмотрим, как разрешить их передачу, чуть далее.</p>\r\n<div class=\"important important_warn\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Что может сделать хакер, используя такие запросы?</span></div>\r\n            <div class=\"important__content\"><p>Описанные выше ограничения приводят к тому, что запрос полностью безопасен.</p>\r\n<p>Действительно, злая страница может сформировать любой GET/POST-запрос и отправить его, но без разрешения сервера ответа она не получит.</p>\r\n<p>А без ответа такой запрос, по сути, эквивалентен отправке формы GET/POST, причём без авторизации.</p>\r\n</div></div>\r\n<h2><a class=\"main__anchor\" name=\"ogranicheniya-ie9\" href=\"#ogranicheniya-ie9\">Ограничения IE9-</a></h2><p>В IE9- используется <code>XDomainRequest</code>, который представляет собой урезанный <code>XMLHttpRequest</code>.</p>\r\n<p>На него действуют ограничения:</p>\r\n<ul>\r\n<li>Протокол нужно сохранять: запросы допустимы с HTTP на HTTP, с HTTPS на HTTPS. Другие протоколы запрещены.</li>\r\n<li>Метод <code>open(method, url)</code> имеет только два параметра. Он всегда асинхронный.</li>\r\n<li>Ряд возможностей современного стандарта недоступны, в частности:\r\n<ul>\r\n<li>Недоступны методы, кроме GET или POST.</li>\r\n<li>Нельзя добавлять свои заголовки, даже нельзя указать свой <code>Content-Type</code> для запроса, он всегда <code>text/plain</code>.</li>\r\n<li>Нельзя включить передачу кук и данных HTTP-авторизации.</li>\r\n</ul>\r\n</li>\r\n<li>В IE8 в режиме просмотра InPrivate кросс-доменные запросы не работают.</li>\r\n</ul>\r\n<p>Современный стандарт <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">XMLHttpRequest</a> предусматривает средства для преодоления этих ограничений, но на момент выхода IE8 они ещё не были проработаны, поэтому их не реализовали. А IE9 исправил некоторые ошибки, но в общем не добавил ничего нового.</p>\r\n<p>Поэтому на сайтах, которые хотят поддерживать IE9-, то на практике кросс-доменные запросы редко используют, предпочитая другие способы кросс-доменной коммуникации. Например, динамически создаваемый тег <code>SCRIPT</code> или вспомогательный <code>IFRAME</code> с другого домена. Мы разберём эти подходы в последующих главах.</p>\r\n<div class=\"important important_smart\">\r\n            <div class=\"important__header\"><span class=\"important__type\">Как разрешить кросс-доменные запросы от доверенного сайта в IE9-?</span></div>\r\n            <div class=\"important__content\"><p>Разрешить кросс-доменные запросы для «доверенных» сайтов можно в настройках IE, во вкладке «Безопасность», включив пункт «Доступ к источникам данных за пределами домена».</p>\r\n<p>Обычно это делается для зоны «Надёжные узлы», после чего в неё вносится доверенный сайт. Теперь он может делать кросс-доменные запросы <code>XMLHttpRequest</code>.</p>\r\n<p>Этот способ можно применить для корпоративных сайтов, а также в тех случаях, когда посетитель заведомо вам доверяет, но почему-то (компьютер на работе, админ запрещает ставить другой браузер?) хочет использовать именно IE. Например, он может предлагаться в качестве дополнительной инструкции «как заставить этот сервис работать под IE».</p>\r\n</div></div>\r\n<div class=\"important important_smart\">\r\n            <div class=\"important__header\"><span class=\"important__type\">В IE разрешён другой порт</span></div>\r\n            <div class=\"important__content\"><p>В кросс-доменные ограничения IE не включён порт.</p>\r\n<p>То есть, можно сделать запрос с <code>http://javascript.ru</code> на <code>http://javascript.ru:8080</code>, и в IE он не будет считаться кросс-доменным.</p>\r\n<p>Это позволяет решить некоторые задачи, связанные с взаимодействием различных сервисов в рамках одного сайта. Но только для IE.</p>\r\n</div></div>\r\n<p>Расширенные возможности, описанные далее, поддерживаются всеми современными браузерами, кроме IE9-.</p>\r\n<h2><a class=\"main__anchor\" name=\"zagolovki-otveta\" href=\"#zagolovki-otveta\">Заголовки ответа</a></h2><p>Чтобы JavaScript мог прочитать HTTP-заголовок ответа, сервер должен указать его имя в <code>Access-Control-Expose-Headers</code>.</p>\r\n<p>Например:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:3,&quot;end&quot;:5}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight\" data-start=\"3\">\r\n\r\n\r\n<code class=\"mask\">\r\n\r\n\r\n</code></code><code class=\" language-none\">HTTP/1.1 200 OK\r\nContent-Type:text/html; charset=UTF-8\r\nAccess-Control-Allow-Origin: http://javascript.ru\r\nX-Uid: 123\r\nX-Authorization: 2c9de507f2c54aa1\r\nAccess-Control-Expose-Headers: X-Uid, X-Authentication</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>По умолчанию скрипт может прочитать из ответа только «простые» заголовки:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\" language-none\">Cache-Control\r\nContent-Language\r\nContent-Type\r\nExpires\r\nLast-Modified\r\nPragma</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>…То есть, <code>Content-Type</code> получить всегда можно, а доступ к специфическим заголовкам нужно открывать явно.</p>\r\n<h2><a class=\"main__anchor\" name=\"zaprosy-ot-imeni-polzovatelya\" href=\"#zaprosy-ot-imeni-polzovatelya\">Запросы от имени пользователя</a></h2><p>По умолчанию браузер не передаёт с запросом куки и авторизующие заголовки.</p>\r\n<p>Чтобы браузер передал вместе с запросом куки и HTTP-авторизацию, нужно поставить запросу <code>xhr.withCredentials = true</code>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\nxhr<code class=\"token punctuation\">.</code>withCredentials <code class=\"token operator\">=</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'POST\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'http://anywhere.com/request\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code>\r\n  <code class=\"token operator\">...</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Далее – всё как обычно, дополнительных действий со стороны клиента не требуется.</p>\r\n<p>Такой <code>XMLHttpRequest</code> с куками, естественно, требует от сервера больше разрешений, чем «анонимный».</p>\r\n<p><strong>Поэтому для запросов с <code>withCredentials</code> предусмотрено дополнительное подтверждение со стороны сервера.</strong></p>\r\n<p>При запросе с <code>withCredentials</code> сервер должен вернуть уже не один, а два заголовка:</p>\r\n<ul>\r\n<li><code>Access-Control-Allow-Origin: домен</code></li>\r\n<li><code>Access-Control-Allow-Credentials: true</code></li>\r\n</ul>\r\n<p>Пример заголовков:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:2,&quot;end&quot;:3}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\"block-highlight\" data-start=\"2\">\r\n\r\n<code class=\"mask\">\r\n\r\n</code></code><code class=\" language-javascript\"><code class=\"token constant\">HTTP</code><code class=\"token operator\">/</code><code class=\"token number\">1.1</code> <code class=\"token number\">200</code> <code class=\"token constant\">OK</code>\r\nContent<code class=\"token operator\">-</code>Type<code class=\"token punctuation\">:</code>text<code class=\"token operator\">/</code>html<code class=\"token punctuation\">;</code> charset<code class=\"token operator\">=</code><code class=\"token constant\">UTF</code><code class=\"token operator\">-</code><code class=\"token number\">8</code>\r\nAccess<code class=\"token operator\">-</code>Control<code class=\"token operator\">-</code>Allow<code class=\"token operator\">-</code>Origin<code class=\"token punctuation\">:</code> http<code class=\"token punctuation\">:</code><code class=\"token operator\">/</code><code class=\"token operator\">/</code>javascript<code class=\"token punctuation\">.</code>ru\r\nAccess<code class=\"token operator\">-</code>Control<code class=\"token operator\">-</code>Allow<code class=\"token operator\">-</code>Credentials<code class=\"token punctuation\">:</code> <code class=\"token boolean\">true</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Использование звёздочки <code>*</code> в <code>Access-Control-Allow-Origin</code> при этом запрещено.</p>\r\n<p>Если этих заголовков не будет, то браузер не даст JavaScript’у доступ к ответу сервера.</p>\r\n<h2><a class=\"main__anchor\" name=\"neprostye-zaprosy\" href=\"#neprostye-zaprosy\">«Непростые» запросы</a></h2><p>В кросс-доменном <code>XMLHttpRequest</code> можно указать не только <code>GET/POST</code>, но и любой другой метод, например <code>PUT</code>, <code>DELETE</code>.</p>\r\n<p>Когда-то никто и не думал, что страница сможет сделать такие запросы. Поэтому ряд веб-сервисов написаны в предположении, что «если метод – нестандартный, то это не браузер». Некоторые веб-сервисы даже учитывают это при проверке прав доступа.</p>\r\n<p>Чтобы пресечь любые недопонимания, браузер использует предзапрос в случаях, когда:</p>\r\n<ul>\r\n<li>Если метод – не GET / POST / HEAD.</li>\r\n<li>Если заголовок <code>Content-Type</code> имеет значение отличное от <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> или <code>text/plain</code>, например <code>application/xml</code>.</li>\r\n<li>Если устанавливаются другие HTTP-заголовки, кроме <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code>.</li>\r\n</ul>\r\n<p>…Любое из условий выше ведёт к тому, что браузер сделает два HTTP-запроса.</p>\r\n<p>Первый запрос называется «предзапрос» (английский термин «preflight»). Браузер делает его целиком по своей инициативе, из JavaScript мы о нём ничего не знаем, хотя можем увидеть в инструментах разработчика.</p>\r\n<p>Этот запрос использует метод <code>OPTIONS</code>. Он не содержит тела и содержит название желаемого метода в заголовке <code>Access-Control-Request-Method</code>, а если добавлены особые заголовки, то и их тоже – в <code>Access-Control-Request-Headers</code>.</p>\r\n<p>Его задача – спросить сервер, разрешает ли он использовать выбранный метод и заголовки.</p>\r\n<p>На этот запрос сервер должен ответить статусом 200, без тела ответа, указав заголовки <code>Access-Control-Allow-Method: метод</code> и, при необходимости, <code>Access-Control-Allow-Headers: разрешённые заголовки</code>.</p>\r\n<p>Дополнительно он может указать <code>Access-Control-Max-Age: sec</code>, где <code>sec</code> – количество секунд, на которые нужно закэшировать разрешение. Тогда при последующих вызовах метода браузер уже не будет делать предзапрос.</p>\r\n<figure><div class=\"image\" style=\"width:610px\">\r\n      <div class=\"image__ratio\" style=\"padding-top:103.77049180327869%\"></div>\r\n      <img src=\"https://learn.javascript.ru/article/xhr-crossdomain/xhr-preflight@2x.png\" alt=\"\" width=\"610\" height=\"633\" class=\"image__image\">\r\n      </div></figure><p>Давайте рассмотрим предзапрос на конкретном примере.</p>\r\n<h3><a class=\"main__anchor\" name=\"primer-zaprosa-copy\" href=\"#primer-zaprosa-copy\">Пример запроса COPY</a></h3><p>Рассмотрим запрос <code>COPY</code>, который используется в протоколе <a href=\"http://www.webdav.org/specs/rfc2518.html\">WebDAV</a> для управления файлами через HTTP:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'COPY\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'http://site.com/~ilya\'</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">setRequestHeader</code><code class=\"token punctuation\">(</code><code class=\"token string\">\'Destination\'</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\'http://site.com/~ilya.bak\'</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code>onload <code class=\"token operator\">=</code> <code class=\"token operator\">...</code>\r\nxhr<code class=\"token punctuation\">.</code>onerror <code class=\"token operator\">=</code> <code class=\"token operator\">...</code>\r\n\r\nxhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Этот запрос «непростой» по двум причинам (достаточно было бы одной из них):</p>\r\n<ol>\r\n<li>Метод <code>COPY</code>.</li>\r\n<li>Заголовок <code>Destination</code>.</li>\r\n</ol>\r\n<p>Поэтому браузер, по своей инициативе, шлёт предварительный запрос <code>OPTIONS</code>:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:5,&quot;end&quot;:7}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight\" data-start=\"5\">\r\n\r\n\r\n\r\n\r\n<code class=\"mask\">\r\n\r\n\r\n</code></code><code class=\" language-none\">OPTIONS /~ilya HTTP/1.1\r\nHost: site.com\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Encoding: gzip,deflate\r\nConnection: keep-alive\r\nOrigin: http://javascript.ru\r\nAccess-Control-Request-Method: COPY\r\nAccess-Control-Request-Headers: Destination</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Обратим внимание на детали:</p>\r\n<ul>\r\n<li>Адрес – тот же, что и у основного запроса: <code>http://site.com/~ilya</code>.</li>\r\n<li>Стандартные заголовки запроса <code>Accept</code>, <code>Accept-Encoding</code>, <code>Connection</code> присутствуют.</li>\r\n<li>Кросс-доменные специальные заголовки запроса:\r\n<ul>\r\n<li><code>Origin</code> – домен, с которого сделан запрос.</li>\r\n<li><code>Access-Control-Request-Method</code> – желаемый метод.</li>\r\n<li><code>Access-Control-Request-Headers</code> – желаемый «непростой» заголовок.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>На этот запрос сервер должен ответить статусом 200, указав заголовки <code>Access-Control-Allow-Method: COPY</code> и <code>Access-Control-Allow-Headers: Destination</code>.</p>\r\n<p>Но в протоколе WebDav разрешены многие методы и заголовки, которые имеет смысл сразу перечислить в ответе:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:4,&quot;cols&quot;:[{&quot;start&quot;:0,&quot;end&quot;:22}]},{&quot;start&quot;:3,&quot;cols&quot;:[{&quot;start&quot;:0,&quot;end&quot;:28}]},{&quot;start&quot;:2,&quot;cols&quot;:[{&quot;start&quot;:0,&quot;end&quot;:28}]}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight block-highlight_inline\" data-start=\"4\">\r\n\r\n\r\n\r\n<code class=\"mask-inline\">                      </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"3\">\r\n\r\n\r\n<code class=\"mask-inline\">                            </code></code><code class=\"block-highlight block-highlight_inline\" data-start=\"2\">\r\n\r\n<code class=\"mask-inline\">                            </code></code><code class=\" language-none\">HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nAccess-Control-Allow-Methods: PROPFIND, PROPPATCH, COPY, MOVE, DELETE, MKCOL, LOCK, UNLOCK, PUT, GETLIB, VERSION-CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, REPORT, UPDATE, CANCELUPLOAD, HEAD, OPTIONS, GET, POST\r\nAccess-Control-Allow-Headers: Overwrite, Destination, Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\r\nAccess-Control-Max-Age: 86400</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Ответ должен быть без тела, то есть только заголовки.</p>\r\n<p>Браузер видит, что метод <code>COPY</code> – в числе разрешённых и заголовок <code>Destination</code> – тоже, и дальше он шлёт уже основной запрос.</p>\r\n<p>При этом ответ на предзапрос он закэширует на 86400 сек (сутки), так что последующие аналогичные вызовы сразу отправят основной запрос, без <code>OPTIONS</code>.</p>\r\n<p>Основной запрос браузер выполняет уже в «обычном» кросс-доменном режиме:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:3,&quot;end&quot;:4}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight\" data-start=\"3\">\r\n\r\n\r\n<code class=\"mask\">\r\n\r\n</code></code><code class=\" language-none\">COPY /~ilya HTTP/1.1\r\nHost: site.com\r\nContent-Type: text/html; charset=UTF-8\r\nDestination: http://site.com/~ilya.bak\r\nOrigin: http://javascript.ru</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Ответ сервера, согласно спецификации <a href=\"http://www.webdav.org/specs/rfc2518.html#rfc.section.8.8.8\">WebDav COPY</a>, может быть примерно таким:</p>\r\n<div data-trusted=\"1\" class=\"code-example\" data-highlight=\"[{&quot;start&quot;:3,&quot;end&quot;:3}]\" data-prism-highlighted=\"1\">\r\n      <div class=\"codebox code-example__codebox\">\r\n        \r\n        <div class=\"codebox__code\" data-code=\"1\">\r\n          <pre class=\"line-numbers  language-none\"><code class=\"block-highlight\" data-start=\"3\">\r\n\r\n\r\n<code class=\"mask\">\r\n</code></code><code class=\" language-none\">HTTP/1.1 207 Multi-Status\r\nContent-Type: text/xml; charset=\"utf-8\"\r\nContent-Length: ...\r\nAccess-Control-Allow-Origin: http://javascript.ru\r\n\r\n&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\r\n&lt;d:multistatus xmlns:d=\"DAV:\"&gt;\r\n  ...\r\n&lt;/d:multistatus&gt;</code><span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\r\n        </div>\r\n      </div>\r\n      \r\n      </div><p>Так как <code>Access-Control-Allow-Origin</code> содержит правильный домен, то браузер вызовет <code>xhr.onload</code> и запрос будет завершён.</p>\r\n<h2><a class=\"main__anchor\" name=\"itogo\" href=\"#itogo\">Итого</a></h2><ul>\r\n<li>Все современные браузеры умеют делать кросс-доменные XMLHttpRequest.</li>\r\n<li>В IE8,9 для этого используется объект <code>XDomainRequest</code>, ограниченный по возможностям.</li>\r\n<li>Кросс-доменный запрос всегда содержит заголовок <code>Origin</code> с доменом запроса.</li>\r\n</ul>\r\n<p>Порядок выполнения:</p>\r\n<ol>\r\n<li>\r\n<p>Для запросов с «непростым» методом или особыми заголовками браузер делает предзапрос <code>OPTIONS</code>, указывая их в <code>Access-Control-Request-Method</code> и <code>Access-Control-Request-Headers</code>.</p>\r\n<p>Браузер ожидает ответ со статусом <code>200</code>, без тела, со списком разрешённых методов и заголовков в <code>Access-Control-Allow-Method</code> и <code>Access-Control-Allow-Headers</code>. Дополнительно можно указать <code>Access-Control-Max-Age</code> для кеширования  предзапроса.</p>\r\n</li>\r\n<li>\r\n<p>Браузер делает запрос и проверяет, есть ли в ответе <code>Access-Control-Allow-Origin</code>, равный <code>*</code> или <code>Origin</code>.</p>\r\n<p>Для запросов с <code>withCredentials</code> может быть только <code>Origin</code> и дополнительно <code>Access-Control-Allow-Credentials: true</code>.</p>\r\n</li>\r\n<li>\r\n<p>Если проверки пройдены, то вызывается <code>xhr.onload</code>, иначе <code>xhr.onerror</code>, без деталей ответа.</p>\r\n</li>\r\n<li>\r\n<p>Дополнительно: названия нестандартных заголовков ответа сервер должен указать в <code>Access-Control-Expose-Headers</code>, если хочет, чтобы клиент мог их прочитать.</p>\r\n</li>\r\n</ol>\r\n<p>Детали и примеры мы разобрали выше.</p>\r\n</div></article>');
INSERT INTO `content` (`id`, `alias_menu`, `title`, `text`) VALUES
(11, 'xhronprogress', 'Индикация прогресса', '<article class=\"formatted\" itemscope=\"\" itemtype=\"http://schema.org/TechArticle\"><meta itemprop=\"name\" content=\"XMLHttpRequest: индикация прогресса\"><div itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"><meta itemprop=\"email\" content=\"iliakan@gmail.com\"><meta itemprop=\"name\" content=\"Ilya Kantor\"></div><div itemprop=\"articleBody\"><p>Запрос <code>XMLHttpRequest</code> состоит из двух фаз:</p> <ol> <li>Стадия закачки (upload). На ней данные загружаются на сервер. Эта фаза может быть долгой для POST-запросов. Для отслеживания прогресса на стадии закачки существует объект типа <a href=\"https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget\">XMLHttpRequestUpload</a>, доступный как <code>xhr.upload</code> и события на нём.</li> <li>Стадия скачивания (download). После того, как данные загружены, браузер скачивает ответ с сервера. Если он большой, то это может занять существенное время. На этой стадии используется обработчик <code>xhr.onprogress</code>.</li> </ol> <p>Далее – обо всём по порядку.</p> <h2><a class=\"main__anchor\" name=\"stadiya-zakachki\" href=\"#stadiya-zakachki\">Стадия закачки</a></h2><p>На стадии закачки для получения информации используем объект <code>xhr.upload</code>. У этого объекта нет методов, он только генерирует события в процессе закачки. А они-то как раз и нужны.</p> <p>Вот полный список событий:</p> <ul> <li><code>loadstart</code></li> <li><code>progress</code></li> <li><code>abort</code></li> <li><code>error</code></li> <li><code>load</code></li> <li><code>timeout</code></li> <li><code>loadend</code></li> </ul> <p>Пример установки обработчиков на стадию закачки:</p> <div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"1\">           <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code>upload<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onprogress</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code>event<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>   <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token string\">\'Загружено на сервер \'</code> <code class=\"token operator\">+</code> event<code class=\"token punctuation\">.</code>loaded <code class=\"token operator\">+</code> <code class=\"token string\">\' байт из \'</code> <code class=\"token operator\">+</code> event<code class=\"token punctuation\">.</code>total <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token punctuation\">}</code>  xhr<code class=\"token punctuation\">.</code>upload<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onload</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>   <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token string\">\'Данные полностью загружены на сервер!\'</code> <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token punctuation\">}</code>  xhr<code class=\"token punctuation\">.</code>upload<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onerror</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>   <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token string\">\'Произошла ошибка при загрузке данных на сервер!\'</code> <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token punctuation\">}</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><h2><a class=\"main__anchor\" name=\"stadiya-skachivaniya\" href=\"#stadiya-skachivaniya\">Стадия скачивания</a></h2><p>После того, как загрузка завершена, и сервер соизволит ответить на запрос, <code>XMLHttpRequest</code> начнёт скачивание ответа сервера.</p> <p>На этой фазе <code>xhr.upload</code> уже не нужен, а в дело вступают обработчики событий на самом объекте <code>xhr</code>. В частности, событие <code>xhr.onprogress</code> содержит информацию о количестве принятых байт ответа.</p> <p>Пример обработчика:</p> <div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"1\">           <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\">xhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onprogress</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code>event<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>   <code class=\"token function\">alert</code><code class=\"token punctuation\">(</code> <code class=\"token string\">\'Получено с сервера \'</code> <code class=\"token operator\">+</code> event<code class=\"token punctuation\">.</code>loaded <code class=\"token operator\">+</code> <code class=\"token string\">\' байт из \'</code> <code class=\"token operator\">+</code> event<code class=\"token punctuation\">.</code>total <code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token punctuation\">}</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><p>Все события, возникающие в этих обработчиках, имеют тип <a href=\"https://xhr.spec.whatwg.org/#progressevent\">ProgressEvent</a>, то есть имеют свойства <code>loaded</code> – количество уже пересланных данных в байтах и <code>total</code> – общее количество данных.</p> <h2><a class=\"main__anchor\" name=\"demo-zagruzka-fayla-s-indikatorom-progressa\" href=\"#demo-zagruzka-fayla-s-indikatorom-progressa\">Демо: загрузка файла с индикатором прогресса</a></h2><p>Современный <code>XMLHttpRequest</code> позволяет отправить на сервер всё, что угодно. Текст, файл, форму.</p> <p>Мы, для примера, рассмотрим загрузку файла с индикацией прогресса. Это требует от браузера поддержки <a href=\"http://www.w3.org/TR/FileAPI/\">File API</a>, то есть исключает IE9-.</p> <p>File API позволяет получить доступ к содержимому файла, который перенесён в браузер при помощи Drag’n’Drop или выбран в поле формы, и отправить его при помощи <code>XMLHttpRequest</code>.</p> <p>Форма для выбора файла с обработчиком <code>submit</code>:</p> <div data-trusted=\"0\" class=\"code-example\" data-highlight=\"[{\" data-prism-highlighted=\"0\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"0\">           <pre class=\"line-numbers  language-markup\"><code class=\" language-markup\"><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>form</code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>upload<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>   <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">type</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>file<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">name</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>myfile<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code>   <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>input</code> <code class=\"token attr-name\">type</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>submit<code class=\"token punctuation\">\"</code></code> <code class=\"token attr-name\">value</code><code class=\"token attr-value\"><code class=\"token punctuation\">=</code><code class=\"token punctuation\">\"</code>Загрузить<code class=\"token punctuation\">\"</code></code><code class=\"token punctuation\">&gt;</code></code> <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>form</code><code class=\"token punctuation\">&gt;</code></code>  <code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;</code>script</code><code class=\"token punctuation\">&gt;</code></code><code class=\"token script language-javascript\">   document<code class=\"token punctuation\">.</code>forms<code class=\"token punctuation\">.</code>upload<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onsubmit</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>     <code class=\"token keyword\">var</code> input <code class=\"token operator\">=</code> <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>elements<code class=\"token punctuation\">.</code>myfile<code class=\"token punctuation\">;</code>     <code class=\"token keyword\">var</code> file <code class=\"token operator\">=</code> input<code class=\"token punctuation\">.</code>files<code class=\"token punctuation\">[</code><code class=\"token number\">0</code><code class=\"token punctuation\">]</code><code class=\"token punctuation\">;</code>     <code class=\"token keyword\">if</code> <code class=\"token punctuation\">(</code>file<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>       <code class=\"token function\">upload</code><code class=\"token punctuation\">(</code>file<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>     <code class=\"token punctuation\">}</code>     <code class=\"token keyword\">return</code> <code class=\"token boolean\">false</code><code class=\"token punctuation\">;</code>   <code class=\"token punctuation\">}</code> </code><code class=\"token tag\"><code class=\"token tag\"><code class=\"token punctuation\">&lt;/</code>script</code><code class=\"token punctuation\">&gt;</code></code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><p>Мы получаем файл из формы через свойство <code>files</code> элемента <code>&lt;input&gt;</code> и передаём его в функцию <code>upload</code>:</p> <div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"1\">           <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">function</code> <code class=\"token function\">upload</code><code class=\"token punctuation\">(</code>file<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>    <code class=\"token keyword\">var</code> xhr <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">XMLHttpRequest</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>    <code class=\"token comment\">// обработчик для закачки</code>   xhr<code class=\"token punctuation\">.</code>upload<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onprogress</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code>event<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>     <code class=\"token function\">log</code><code class=\"token punctuation\">(</code>event<code class=\"token punctuation\">.</code>loaded <code class=\"token operator\">+</code> <code class=\"token string\">\' / \'</code> <code class=\"token operator\">+</code> event<code class=\"token punctuation\">.</code>total<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>   <code class=\"token punctuation\">}</code>    <code class=\"token comment\">// обработчики успеха и ошибки</code>   <code class=\"token comment\">// если status == 200, то это успех, иначе ошибка</code>   xhr<code class=\"token punctuation\">.</code>onload <code class=\"token operator\">=</code> xhr<code class=\"token punctuation\">.</code><code class=\"token function-variable function\">onerror</code> <code class=\"token operator\">=</code> <code class=\"token keyword\">function</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>     <code class=\"token keyword\">if</code> <code class=\"token punctuation\">(</code><code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>status <code class=\"token operator\">==</code> <code class=\"token number\">200</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>       <code class=\"token function\">log</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"success\"</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>     <code class=\"token punctuation\">}</code> <code class=\"token keyword\">else</code> <code class=\"token punctuation\">{</code>       <code class=\"token function\">log</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"error \"</code> <code class=\"token operator\">+</code> <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>status<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>     <code class=\"token punctuation\">}</code>   <code class=\"token punctuation\">}</code><code class=\"token punctuation\">;</code>    xhr<code class=\"token punctuation\">.</code><code class=\"token function\">open</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"POST\"</code><code class=\"token punctuation\">,</code> <code class=\"token string\">\"upload\"</code><code class=\"token punctuation\">,</code> <code class=\"token boolean\">true</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>   xhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>file<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code>  <code class=\"token punctuation\">}</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><p>Этот код отправит файл на сервер и будет сообщать о прогрессе при его закачке (<code>xhr.upload.onprogress</code>), а также об окончании запроса (<code>xhr.onload</code>, <code>xhr.onerror</code>).</p>  <h2><a class=\"main__anchor\" name=\"sobytie-onprogress-v-detalyah\" href=\"#sobytie-onprogress-v-detalyah\">Событие onprogress в деталях</a></h2><p>При обработке события <code>onprogress</code> есть ряд важных тонкостей.</p> <p>Можно, конечно, их игнорировать, но лучше бы знать.</p> <p>Заметим, что событие, возникающее при <code>onprogress</code>, имеет одинаковый вид на стадии закачки (в обработчике <code>xhr.upload.onprogress</code>) и при получении ответа (в обработчике <code>xhr.onprogress</code>).</p> <p>Оно представляет собой объект типа <a href=\"https://xhr.spec.whatwg.org/#progressevent\">ProgressEvent</a> со свойствами:</p> <dl> <dt><code>loaded</code></dt> <dd> <p>Сколько байт уже переслано.</p> <p>Имеется в виду только тело запроса, заголовки не учитываются.</p> </dd> <dt><code>lengthComputable</code></dt> <dd> <p>Если <code>true</code>, то известно полное количество байт для пересылки, и оно хранится в свойстве <code>total</code>.</p> </dd> <dt><code>total</code></dt> <dd> <p>Общее количество байт для пересылки, если известно.</p> <p>А может ли оно быть неизвестно?</p> </dd> </dl> <ul> <li>При закачке на сервер браузер всегда знает полный размер пересылаемых данных, так что <code>total</code> всегда содержит конкретное количество байт, а значение <code>lengthComputable</code> всегда будет <code>true</code>.</li> <li>При скачивании данных – обычно сервер в начале сообщает их общее количество в HTTP-заголовке <code>Content-Length</code>. Но он может и не делать этого, например если сам не знает, сколько данных будет или если генерирует их динамически. Тогда <code>total</code> будет равно <code>0</code>. А чтобы отличить нулевой размер данных от неизвестного – как раз служит <code>lengthComputable</code>, которое в данном случае равно <code>false</code>.</li> </ul> <p>Ещё особенности, которые необходимо учитывать при использовании <code>onprogress</code>:</p> <ul> <li> <p><strong>Событие происходит при каждом полученном/отправленном байте, но не чаще чем раз в 50 мс.</strong></p> <p>Это обозначено в <a href=\"http://www.w3.org/TR/XMLHttpRequest/#make-progress-notifications\">спецификации progress notifications</a>.</p> </li> <li> <p><strong>В процессе получения данных, ещё до их полной передачи, доступен <code>xhr.responseText</code>, но он не обязательно содержит корректную строку.</strong></p> <p>Можно до окончания запроса заглянуть в него и прочитать текущие полученные данные. Важно, что при пересылке строки в кодировке UTF-8 кириллические символы, как, впрочем, и многие другие, кодируются 2 байтами. Возможно, что в конце одного пакета данных окажется первая половинка символа, а в начале следующего – вторая. Поэтому полагаться на то, что до окончания запроса в <code>responseText</code> находится корректная строка нельзя. Она может быть обрезана посередине символа.</p> <p>Исключение – заведомо однобайтные символы, например цифры или латиница.</p> </li> <li> <p><strong>Сработавшее событие <code>xhr.upload.onprogress</code> не гарантирует, что данные дошли.</strong></p> <p>Событие <code>xhr.upload.onprogress</code> срабатывает, когда данные отправлены браузером. Но оно не гарантирует, что сервер получил, обработал и записал данные на диск. Он говорит лишь о самом факте отправки.</p> <p>Поэтому прогресс-индикатор, получаемый при его помощи, носит приблизительный и оптимистичный характер.</p> </li> </ul> <h2><a class=\"main__anchor\" name=\"fayly-i-formy\" href=\"#fayly-i-formy\">Файлы и формы</a></h2><p>Выше мы использовали <code>xhr.send(file)</code> для передачи файла непосредственно в теле запроса.</p> <p>При этом посылается только <em>содержимое</em> файла.</p> <p>Если нужно дополнительно передать имя файла или что-то ещё – это можно удобно сделать через форму, при помощи объекта <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects\">FormData</a>:</p> <p>Создадим форму <code>formData</code> и прибавим к ней поле с файлом <code>file</code> и именем <code>\"myfile\"</code>:</p> <div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"1\">           <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> formData <code class=\"token operator\">=</code> <code class=\"token keyword\">new</code> <code class=\"token class-name\">FormData</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> formData<code class=\"token punctuation\">.</code><code class=\"token function\">append</code><code class=\"token punctuation\">(</code><code class=\"token string\">\"myfile\"</code><code class=\"token punctuation\">,</code> file<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> xhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>formData<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><p>Данные будут отправлены в кодировке <code>multipart/form-data</code>. Серверный фреймворк увидит это как обычную форму с файлом, практически все серверные технологии имеют их встроенную поддержку. Индикация прогресса реализуется точно так же.</p> </div></article>'),
(12, 'xhrresume', 'Возобновляемая закачка', '<article class=\"formatted\" itemscope=\"\" itemtype=\"http://schema.org/TechArticle\"><meta itemprop=\"name\" content=\"XMLHttpRequest: возобновляемая закачка\"><div itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"><meta itemprop=\"email\" content=\"iliakan@gmail.com\"><meta itemprop=\"name\" content=\"Ilya Kantor\"></div><div itemprop=\"articleBody\"><p>Современный <code>XMLHttpRequest</code> даёт возможность загружать файл как угодно: во множество потоков, с догрузкой, с подсчётом контрольной суммы и т.п.</p> <p>Здесь мы рассмотрим общий подход к организации загрузки, а его уже можно расширять, адаптировать к своему фреймворку и так далее.</p> <p>Поддержка – все браузеры кроме IE9-.</p> <h2><a class=\"main__anchor\" name=\"netochnyy-upload-onprogress\" href=\"#netochnyy-upload-onprogress\">Неточный upload.onprogress</a></h2><p>Ранее мы рассматривали загрузку с индикатором прогресса. Казалось бы, сделать возобновляемую загрузку на его основе очень просто.</p> <p>Есть же <code>xhr.upload.onprogress</code> – ставим на него обработчик, по свойству <code>loaded</code>  события <code>onprogress</code> смотрим, сколько байт загрузилось. А при обрыве – возобновляем загрузку с последнего байта.</p> <p>К счастью, отослать на сервер не весь файл, а только нужную часть его – не проблема, <a href=\"http://www.w3.org/TR/FileAPI/\">File API</a> позволяет прочитать выбранный участок из файла и отправить его.</p> <p>Примерно так:</p> <div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"1\">           <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">var</code> slice <code class=\"token operator\">=</code> file<code class=\"token punctuation\">.</code><code class=\"token function\">slice</code><code class=\"token punctuation\">(</code><code class=\"token number\">10</code><code class=\"token punctuation\">,</code> <code class=\"token number\">100</code><code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// прочитать байты с 10-го по 99-й включительно</code>  xhr<code class=\"token punctuation\">.</code><code class=\"token function\">send</code><code class=\"token punctuation\">(</code>slice<code class=\"token punctuation\">)</code><code class=\"token punctuation\">;</code> <code class=\"token comment\">// ... и отправить эти байты в запросе.</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><p>…Но такая модель не жизнеспособна!</p> <p>Всё дело в том, что <code>upload.onprogress</code> срабатывает, когда байты <em>отправлены</em>, но были ли они получены сервером – браузер не знает. Может, их прокси-сервер забуферизовал, может серверный процесс «упал» в процессе обработки, может соединение порвалось и байты так и не дошли до получателя.</p> <p><strong>Поэтому <code>onprogress</code> годится лишь для красивенького рисования прогресса.</strong></p> <p>Для загрузки нам нужно точно знать количество загруженных байт. Это может сообщить только сервер.</p> <h2><a class=\"main__anchor\" name=\"algoritm-vozobnovlyaemoy-zagruzki\" href=\"#algoritm-vozobnovlyaemoy-zagruzki\">Алгоритм возобновляемой загрузки</a></h2><p>Загрузкой файла будет заведовать объект <code>Uploader</code>, его примерный общий вид:</p> <div data-trusted=\"1\" class=\"code-example\" data-prism-highlighted=\"1\">       <div class=\"codebox code-example__codebox\">                  <div class=\"codebox__code\" data-code=\"1\">           <pre class=\"line-numbers  language-javascript\"><code class=\" language-javascript\"><code class=\"token keyword\">function</code> <code class=\"token function\">Uploader</code><code class=\"token punctuation\">(</code>file<code class=\"token punctuation\">,</code> onSuccess<code class=\"token punctuation\">,</code> onFail<code class=\"token punctuation\">,</code> onProgress<code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>    <code class=\"token keyword\">var</code> fileId <code class=\"token operator\">=</code> file<code class=\"token punctuation\">.</code>name <code class=\"token operator\">+</code> <code class=\"token string\">\'-\'</code> <code class=\"token operator\">+</code> file<code class=\"token punctuation\">.</code>size <code class=\"token operator\">+</code> <code class=\"token string\">\'-\'</code> <code class=\"token operator\">+</code> <code class=\"token operator\">+</code>file<code class=\"token punctuation\">.</code>lastModifiedDate<code class=\"token punctuation\">;</code>    <code class=\"token keyword\">var</code> errorCount <code class=\"token operator\">=</code> <code class=\"token number\">0</code><code class=\"token punctuation\">;</code>    <code class=\"token keyword\">var</code> <code class=\"token constant\">MAX_ERROR_COUNT</code> <code class=\"token operator\">=</code> <code class=\"token number\">6</code><code class=\"token punctuation\">;</code>    <code class=\"token keyword\">function</code> <code class=\"token function\">upload</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>     <code class=\"token operator\">...</code>   <code class=\"token punctuation\">}</code>    <code class=\"token keyword\">function</code> <code class=\"token function\">pause</code><code class=\"token punctuation\">(</code><code class=\"token punctuation\">)</code> <code class=\"token punctuation\">{</code>     <code class=\"token operator\">...</code>   <code class=\"token punctuation\">}</code>    <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>upload <code class=\"token operator\">=</code> upload<code class=\"token punctuation\">;</code>   <code class=\"token keyword\">this</code><code class=\"token punctuation\">.</code>pause <code class=\"token operator\">=</code> pause<code class=\"token punctuation\">;</code> <code class=\"token punctuation\">}</code></code><span class=\"line-numbers-rows\"><span></span></span></pre>         </div>       </div>              </div><ul> <li>Аргументы для <code>new Uploader</code>:</li> </ul> <dl> <dt><code>file</code></dt> <dd>Объект File API. Может быть получен из формы, либо как результат Drag’n’Drop.</dd><dd> <code>onSuccess</code>, <code>onFail</code>, <code>onProgress</code></dd> </dl> <dd>Функции-коллбэки, которые будут вызываться в процессе (`onProgress`) и при окончании загрузки. <ul> <li>Подробнее про важные данные, с которыми мы будем работать в процессе загрузки:</li> </ul> <dl> <dt><code>fileId</code></dt> <dd>Уникальный идентификатор файла, генерируется по имени, размеру и дате модификации. По нему мы всегда сможем возобновить загрузку, в том числе и после закрытия и открытия браузера.</dd> <dt><code>startByte</code></dt> <dd>С какого байта загружать. Изначально – с нулевого.</dd> <dt><code>errorCount / MAX_ERROR_COUNT</code></dt> <dd>Текущее число ошибок / максимальное число ошибок подряд, после которого загрузка считается проваленной.</dd> </dl> <p>Алгоритм загрузки:</p> <ol> <li>Генерируем <code>fileId</code> из названия, размера, даты модификации файла. Можно добавить и идентификатор посетителя.</li> <li>Спрашиваем сервер, есть ли уже такой файл, и если да – сколько байт уже загружено?</li> <li>Отсылаем файл с позиции, которую сказал сервер.</li> </ol> <p>При этом загрузку можно прервать в любой момент, просто оборвав все запросы.</p> <p>Демо ниже, к сожалению, работает лишь частично, так как на этом сайте Node.JS стоит за сервером Nginx, который буферизует все закачки, не передавая их в Node.JS до полного завершения.</p>  <p>Полный код включает также сервер на Node.JS с функциям <code>onUpload</code> – начало и возобновление загрузки, а также <code>onStatus</code> – для получения состояния загрузки.</p> <h2><a class=\"main__anchor\" name=\"itogo\" href=\"#itogo\">Итого</a></h2><p>Мы рассмотрели довольно простой алгоритм возобновляемой загрузки.</p> <p>Его можно усложнить:</p> <ul> <li>добавить подсчёт контрольных сумм, проверку целостности пересылаемых файлов,</li> <li>для индикации прогресса вместо неточного <code>xhr.upload.onprogress</code> – сделать дополнительный запрос к серверу, в который тот будет отдавать текущий прогресс.</li> <li>разбивать файл на части и грузить в несколько потоков, несколькими параллельными запросами.</li> </ul> <p>Как можно видеть, возможности современного XMLHttpRequest в плане загрузки файлов приближаются к полноценному файловому менеджеру – полный контроль над заголовками, индикатор прогресса и т.п.</p> </dd></div></article>'),
(13, 'jqueryajax', 'jQuery Ajax', '<p><b>AJAX</b> (от англ. <i>Asynchronous Javascript and XML</i> — \"асинхронный JavaScript и XML\") — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в \"фоновом\" обмене данными браузера с веб-сервером.</p>\r\n<div class=\"lessons-list\">\r\n   <ol class=\"lessons-list__lessons\">\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxcomplete\">.ajaxComplete()</a> - <span>Метод задает функцию (обработчик события), которая вызывается после завершения AJAX запроса.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxerror\">.ajaxError()</a> - <span>Метод задает функцию (обработчик события), которая вызывается в том случае, если AJAX запрос завершился ошибкой.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxsend\">.ajaxSend()</a> - <span>Метод задает функцию (обработчик события), которая будет выполняться перед тем как AJAX запрос будет выполнен.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxstart\">.ajaxStart()</a> - <span>Метод задает функцию (обработчик события), которая вызывается после того как последовал первый AJAX запрос (при этом отсутствуют другие неотправленные AJAX запросы).</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxstop\">.ajaxStop()</a> - <span>Метод задает функцию (обработчик события), которая вызывается после завершения всех AJAX запросов (при этом отсутствуют другие незавершенные AJAX запросы).</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxsuccess\">.ajaxSuccess()</a> - <span>Метод задает функцию (обработчик события), которая вызывается в том случае, если AJAX запрос завершился успешно.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajax\">.ajax()</a> - <span>Позволяет выполнить асинхронный AJAX запрос.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxprefilter\">.ajaxPrefilter()</a> - <span>Функция регулирует пользовательские параметры AJAX, или изменяет существующие параметры, прежде чем каждый запрос будет отправлен, или обработан функцией .ajax().</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxsetup\">.ajaxSetup()</a> - <span>Функция устанавливает значения по умолчанию для будущих запросов AJAX. Использование этой функции не рекомендовано.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_ajaxtransport\">.ajaxTransport()</a> - <span>Функция создает транспортный объект, который обрабатывает фактическую передачу данных запроса AJAX.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_get\">.get()</a> - <span>Загрузка данных с сервера происходит с помощью HTTP запроса методом GET.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_getjson\">.getJSON()</a> - <span>Позволяет загрузить закодированные в формате JSON данные с сервера, с помощью HTTP запроса методом GET.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_getscript\">.getScript()</a> - <span>Позволяет загрузить JavaScript файл с сервера с помощью HTTP запроса методом GET, а затем выполнить его.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_param\">.param()</a> - <span>Функция создает сериализованное представление массива, простого объекта, или объекта jQuery, которое подходит для использования в строке URL запроса, или AJAX запроса.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_post\">.post()</a> - <span>Позволяет загрузить данные с сервера с помощью HTTP запроса методом POST.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_load\">.load()</a> - <span>Позволяет загрузить данные с сервера и разместить, возвращенный HTML код внутри необходимых элементов.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_serialize\">.serialize()</a> - <span>Кодирует набор элементов формы в виде строки, пригодной для дальнейшего представления в составе строки запроса URL адреса.</span></li>\r\n      <li class=\"lessons-list__lesson\"><a class=\"lessons-list__link\" href=\"/?page=jm_serializearray\">.serializeArray()</a> - <span>Кодирует набор элементов формы в виде массива объектов, содержащих имена и значения.</span></li>\r\n   </ol>\r\n</div>'),
(14, 'jm_ajaxcomplete', 'jQuery метод .ajaxComplete()', '<p>jQuery метод <b>.ajaxComplete()</b> позволяет задать функцию (обработчик события), которая вызывается после завершения <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i> запроса.</p>\r\n<hr>\r\n<p>Обращаю Ваше внимание, что каждый раз, когда <i>AJAX</i> запрос завершается <i>jQuery</i> инициирует событие <samp>ajaxComplete</samp>, при этом все обработчики события, которые были зарегистрированы при помощи метода <b>.ajaxComplete()</b> будут выполнены в данный момент. Метод <b>.ajaxComplete()</b> будет выполнен независимо от того как <i>AJAX</i> запрос был завершен (даже если он завершен неудачно).</p>\r\n<hr>\r\n<p>Если методы $.ajax()&nbsp;<b>$.ajaxSetup()</b> используются с установленным параметром <b>global</b> со значением <span class=\"fnc\">false</span>, то обработчик <samp>ajaxComplete</samp> не будет вызван. Начиная с версии jQuery 1.9, все обработчики для глобальных AJAX событий, должны быть прикреплены к объекту <span class=\"fnc\">document</span> следующием образом: </p>\r\n<p>$( document ).ajaxEvent( handler ) // пример добавления обработчика для глобального AJAX события</p>\r\n<p>.ajaxComplete( handler )\r\n   handler - Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions )\r\n</p>\r\n'),
(15, 'jm_ajaxerror', 'jQuery метод .ajaxError()', '<p>jQuery метод <b>.ajaxError()</b> позволяет задать функцию (обработчик события), которая вызывается в том случае, если <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i> запрос завершился ошибкой.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Каждый раз, когда <i>AJAX</i> запрос завершается ошибкой, <i>jQuery</i> инициирует событие <samp>ajaxError</samp>, при этом все обработчики события, которые были зарегистрированы при помощи метода <b>.ajaxError()</b> будут выполнены в данный момент.</p>\r\n<p><b>Обращаю Ваше внимание, что этот обработчик не вызывается для кроссдоменных скриптов и кроссдоменных <i title=\"«JSON with padding» (JSON с набивкой) — это дополнение к базовому формату JSON. Он предоставляет способ запросить данные с сервера, находящегося в другом домене — операцию, запрещённую в типичных веб-браузерах из-за политики ограничения домена.\">JSONP</i> запросов.</b></p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Если методы <a href=\"jquery_method_ajax.php\" title=\"jQuery метод $.ajax()\">$.ajax()</a>, или <b>$.ajaxSetup()</b> используются с установленным параметром <b>global</b> со значением <span class=\"fnc\">false</span>, то обработчик <samp>ajaxError</samp> не будет вызван. Начиная с версии jQuery 1.9, все обработчики для глобальных AJAX событий, должны быть прикреплены к объекту <span class=\"fnc\">document</span> следующием образом:</p>\r\n'),
(16, 'jm_ajaxsend', 'jQuery метод .ajaxSend()', '<p>jQuery метод <b>.ajaxSend()</b> позволяет задать функцию (обработчик события), которая будет выполняться перед тем как <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i> запрос будет выполнен.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание, что каждый раз, перед отправкой <i>AJAX</i> запроса, <i>jQuery</i> инициирует событие <samp>ajaxSend</samp>, при этом все обработчики события, которые были зарегистрированы при помощи метода <b>.ajaxSend()</b> будут выполнены в данный момент.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Если методы <a href=\"jquery_method_ajax.php\" title=\"jQuery метод $.ajax()\">$.ajax()</a>, или <b>$.ajaxSetup()</b> используются с установленным параметром <b>global</b> со значением <span class=\"fnc\">false</span>, то обработчик <samp>ajaxSend</samp> не будет вызван. Начиная с версии <i>jQuery 1.9</i>, все обработчики для глобальных <i>AJAX</i> событий, должны быть прикреплены к объекту <span class=\"fnc\">document</span> следующием образом: </p>'),
(17, 'jm_ajaxstart', 'jQuery метод .ajaxStart()', '<p>jQuery метод <b>.ajaxStart()</b> позволяет задать функцию (обработчик события), которая вызывается после того как последовал <b>первый</b> <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i> запрос (при этом отсутствуют другие неотправленные <i>AJAX</i> запросы).</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание, что каждый раз, когда <i>AJAX</i> запрос <b>отправляется</b>, <i>jQuery</i> проверяет есть ли какие-нибудь другие невыполненные <i>AJAX</i> запросы, если нет, то инициирует событие <samp>ajaxStart</samp>, при этом все обработчики события, которые были зарегистрированы при помощи метода <b>.ajaxStart()</b> будут выполнены в данный момент.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Если методы <a href=\"jquery_method_ajax.php\" title=\"jQuery метод $.ajax()\">$.ajax()</a>, или <b>$.ajaxSetup()</b> используются с установленным параметром <b>global</b> со значением <span class=\"fnc\">false</span>, то обработчик <samp>ajaxStart</samp> не будет вызван. Начиная с версии jQuery 1.9, все обработчики для глобальных AJAX событий, должны быть прикреплены к объекту <span class=\"fnc\">document</span> следующием образом: </p>'),
(18, 'jm_ajaxstop', 'jQuery метод .ajaxStop()', '<p>jQuery метод <b>.ajaxStop()</b> позволяет задать функцию (обработчик события), которая вызывается после завершения <b>всех</b> <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i> запросов (при этом отсутствуют другие незавершенные AJAX запросы).</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание, что каждый раз, когда <i>AJAX</i> запрос <b>завершается</b>, <i>jQuery</i> проверяет есть ли какие-нибудь другие незавершенные <i>AJAX</i> запросы, если нет, то инициирует событие <samp>ajaxStop</samp>, при этом все обработчики события, которые были зарегистрированы при помощи метода <b>.ajaxStop()</b> будут выполнены в данный момент.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Если методы <a href=\"jquery_method_ajax.php\" title=\"jQuery метод $.ajax()\">$.ajax()</a>, или <b>$.ajaxSetup()</b> используются с установленным параметром <b>global</b> со значением <span class=\"fnc\">false</span>, то обработчик <samp>ajaxStop</samp> не будет вызван. Начиная с версии jQuery 1.9, все обработчики для глобальных AJAX событий, должны быть прикреплены к объекту <span class=\"fnc\">document</span> следующием образом: </p>'),
(19, 'jm_ajaxsuccess', 'jQuery метод .ajaxSuccess()', '<p>jQuery метод <b>.ajaxSuccess()</b> позволяет задать функцию (обработчик события), которая вызывается в том случае, если <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i> запрос завершился успешно.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание, что каждый раз, когда <i>AJAX</i> запрос завершается успешно, <i>jQuery</i> инициирует событие <samp>ajaxSuccess</samp>, при этом все обработчики события, которые были зарегистрированы при помощи метода <b>.ajaxSuccess()</b> будут выполнены в данный момент.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Если методы <a href=\"jquery_method_ajax.php\" title=\"jQuery метод $.ajax()\">$.ajax()</a>, или <b>$.ajaxSetup()</b> используются с установленным параметром <b>global</b> со значением <span class=\"fnc\">false</span>, то обработчик <samp>ajaxSuccess</samp> не будет вызван. Начиная с версии jQuery 1.9, все обработчики для глобальных AJAX событий, должны быть прикреплены к объекту <span class=\"fnc\">document</span> следующием образом: </p>'),
(20, 'jm_ajax', 'jQuery функция $.ajax()', '<p>jQuery функция <b>$.ajax()</b> позволяет выполнить асинхронный AJAX запрос. <b>AJAX</b> (от англ. <i>Asynchronous Javascript and XML</i> — \"асинхронный JavaScript и XML\") — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в \"фоновом\" обмене данными браузера с веб-сервером.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание, что все AJAX методы jQuery используют эту функцию, она в основном используется для запросов, где другие методы не могут быть использованы.</p>\r\n<hr class=\"dottedBlueDark\">'),
(21, 'jm_ajaxprefilter', 'jQuery функция .ajaxPrefilter()', '<p>jQuery функция <b>.ajaxPrefilter()</b> регулирует пользовательские параметры <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i>, или изменяет существующие параметры, прежде чем каждый запрос будет отправлен, или обработан функцией <a href=\"jquery_method_ajax.php\" title=\"jQuery функция $.ajax()\">$.ajax()</a>.</p>'),
(22, 'jm_ajaxsetup', 'jQuery функция $.ajaxSetup()', '<p>jQuery функция <b>$.ajaxSetup()</b> позволяет установить значения по умолчанию для будущих запросов <i title=\"(от англ. Asynchronous Javascript and XML — асинхронный JavaScript и XML) — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в фоновом обмене данными браузера с веб-сервером.\">AJAX</i>.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание, что <b>все последующие <i>AJAX</i> запросы</b> с использованием любой функции будут использовать указанные в этой функции настройки, если они не переопределены отдельными вызовами, до тех пор пока функция <b>$.ajaxSetup()</b> не будет вызвана с новыми настройками. Это может вызвать нежелательное поведение, поскольку другие вызывающие методы (например, плагины) могут ожидать нормальные настройки по умолчанию. По этой причине настоятельно рекомендуется не использовать этот <i title=\"англ. application programming interface - программный интерфейс приложения, интерфейс прикладного программирования\">API</i> и вместо этой функции задавать параметры явно в вызове, или определить простой плагин для этого.</p>\r\n<p>Глобальные функции обратного вызова должны быть установлены с соответствующими глобальными методами — обработчиками <i>AJAX</i> событий <a href=\"jquery_method_ajaxcomplete.php\" title=\"jQuery метод .ajaxComplete()\">.ajaxComplete()</a>, <a href=\"jquery_method_ajaxerror.php\" title=\"jQuery метод .ajaxError()\">.ajaxError()</a>, <a href=\"jquery_method_ajaxsend.php\" title=\"jQuery метод .ajaxSend()\">.ajaxSend()</a>, <a href=\"jquery_method_ajaxsuccess.php\" title=\"jQuery метод .ajaxSuccess()\">.ajaxSuccess()</a>, а не устанавливаться внутри функции <b>$.ajaxSetup()</b>.</p>\r\n'),
(23, 'jm_ajaxtransport', 'jQuery функция $.ajaxTransport()', '<p>jQuery функция <b>$.ajaxTransport()</b> позволяет создать транспортный объект, который обрабатывает фактическую передачу данных запроса <i>AJAX</i>. Данный объект предоставляет два метода <samp>send()</samp> и <samp>abort()</samp>, которые используются внутри функции <a href=\"jquery_method_ajax.php\" title=\"jQuery функция $.ajax()\">$.ajax()</a>.</p>\r\n<hr class=\"dottedBlueDark\">\r\n<p>Обращаю Ваше внимание на то, что создание транспортного объекта является наиболее продвинутым способом обработки запроса <i>AJAX</i> и должен использоваться только в качестве крайней меры, когда использование префильтров (функция <a href=\"jquery_method_ajaxprefilter.php\" title=\"jQuery функция $.ajaxPrefilter()\">$.ajaxPrefilter()</a>) и конверторов (параметр <b>converters</b> в функциях <a href=\"jquery_method_ajaxsetup.php\" title=\"jQuery функция .ajaxSetup()\">.ajaxSetup()</a> и <a href=\"jquery_method_ajax.php\" title=\"jQuery функция $.ajax()\">$.ajax()</a>) недостаточно для достижения поставленной задачи.</p>'),
(24, 'jm_get', 'jQuery функция $.get()', '<p>jQuery функция <b>$.get()</b> позволяет загрузить данные с сервера с помощью HTTP запроса методом GET. Для загрузки данных с помощью HTTP запроса методом <i>POST</i> вы можете воспользоваться jQuery функцией <a href=\"jquery_method_post.php\" title=\"jQuery функция $.post()\">$.post()</a>.</p>'),
(25, 'jm_getjson', 'jQuery функция $.getJSON()', '<p>jQuery функция <b>$.getJSON()</b> позволяет загрузить закодированные в формате <abbr title=\"англ. JavaScript Object Notation — текстовый формат обмена данными, основанный на JavaScript.\">JSON</abbr> данные с сервера, с помощью HTTP запроса методом GET. Начиная с версии jQuery 1.4, если <i>JSON</i> файл содержит синтаксическую ошибку, то запрос будет незаметно завершен ошибкой.</p>'),
(26, 'jm_getscript', 'jQuery функция $.getScript()', '<p>jQuery функция <b>$.getScript()</b> позволяет загрузить <i>JavaScript</i> файл с сервера с помощью <i>HTTP</i> запроса методом <i>GET</i>, а затем выполнить его.</p>'),
(27, 'jm_param', 'jQuery функция $.param()', '<p>jQuery функция <b>$.param()</b> создает сериализованное представление массива, простого объекта, или объекта jQuery, которое подходит для использования в строке <i>URL</i> запроса, или  <i>AJAX</i> запроса. В случае, если передан объект jQuery, то он должен содержать элементы ввода, содержащие пары имя/значение.</p>'),
(28, 'jm_post', 'jQuery функция $.post()', '<p>jQuery функция <b>$.post()</b> позволяет загрузить данные с сервера с помощью HTTP запроса методом POST. Для загрузки данных с помощью HTTP запроса методом <i>GET</i> вы можете воспользоваться jQuery функцией <a href=\"jquery_method_get.php\" title=\"jQuery функция $.get()\">$.get()</a>.</p>');
INSERT INTO `content` (`id`, `alias_menu`, `title`, `text`) VALUES
(29, 'jm_load', 'jQuery метод .load()', '<p>jQuery метод <b>.load()</b> позволяет загрузить данные с сервера и разместить, возвращенный <i>HTML</i> код внутри необходимых элементов.</p><hr class=\"dottedBlueDark\"><p>Обращаю Ваше внимание, что до версии jQuery 3.0 существовал одноименный обработчик события <b>.load()</b>, который передается на элемент, когда он и все вложенные элементы были полностью загружены. Старые версии jQuery определяют какой метод вызвать в зависимости от набора параметров, переданных методу. Обработчик события <b>.load()</b> был удален в версии jQuery 3.0.</p>'),
(30, 'jm_serialize', 'jQuery метод .serialize()', '<p>jQuery метод <b>.serialize()</b> кодирует набор элементов формы в виде строки, пригодной для дальнейшего представления в составе строки запроса <i>URL</i> адреса.</p>\r\n<p>Обратите внимание на следующие правила при сериализации:</p>\r\n<ul>\r\n   <li>Элементы формы должны содержать атрибут <span class=\"att\">name</span> для возможности сериализации.</li>\r\n   <li>Значения элементов <a href=\"/html/tag_input.php\" class=\"tag\" title=\"HTML тег input\">&lt;input&gt;</a> с типом (атрибут <a href=\"/html/tag_input_att_type.php\" class=\"att\" title=\"Атрибут type HTML тега input\">type</a>) <span class=\"zna\">\"checkbox\"</span> и <span class=\"zna\">\"radio\"</span> сериализуются только в том случае, если они будут выбраны.</li>\r\n   <li>Данные из элементов <a href=\"/html/tag_input.php\" class=\"tag\" title=\"HTML тег input\">&lt;input&gt;</a>, предназначенных для выбора файлов не сериализуются (<a href=\"/html/tag_input_att_type.php\" class=\"att\" title=\"Атрибут type HTML тега input\">type</a> = <span class=\"zna\">\"file\"</span>).</li>\r\n   <li>Элемент управления не должен быть отключен (атрибут <span class=\"att\">disabled</span>).</li>\r\n   <li>В раскрывающемся списке (элемент <a href=\"/html/tag_select.php\" class=\"tag\" title=\"HTML тег select\">&lt;select&gt;</a>) атрибут <a href=\"/html/tag_select_att_name.php\" class=\"att\" title=\"Атрибут name HTML тега select\">name</a> определяет имя элемента управления, а выбранный элемент, или элементы <a href=\"/html/tag_option.php\" class=\"tag\" title=\"HTML тег option\">&lt;option&gt;</a> определяют его значение. Элементы <a href=\"/html/tag_option.php\" class=\"tag\" title=\"HTML тег option\">&lt;option&gt;</a> сериализуются только в том случае, если они будут выбраны.</li>\r\n</ul>'),
(31, 'jm_serializearray', 'jQuery метод .serializeArray()', '<p>jQuery метод <b>.serializeArray()</b> кодирует набор элементов формы в виде массива объектов, содержащих имена и значения.</p>\r\n<p>Обратите внимание на следующие правила при сериализации:</p>\r\n<ul>\r\n   <li>Элементы формы должны содержать атрибут <span class=\"att\">name</span> для возможности сериализации.</li>\r\n   <li>Значения элементов <a href=\"/html/tag_input.php\" class=\"tag\" title=\"HTML тег input\">&lt;input&gt;</a> с типом (атрибут <a href=\"/html/tag_input_att_type.php\" class=\"att\" title=\"Атрибут type HTML тега input\">type</a>) <span class=\"zna\">\"checkbox\"</span> и <span class=\"zna\">\"radio\"</span> сериализуются только в том случае, если они будут выбраны.</li>\r\n   <li>Данные из элементов <a href=\"/html/tag_input.php\" class=\"tag\" title=\"HTML тег input\">&lt;input&gt;</a>, предназначенных для выбора файлов не сериализуются (<a href=\"/html/tag_input_att_type.php\" class=\"att\" title=\"Атрибут type HTML тега input\">type</a> = <span class=\"zna\">\"file\"</span>).</li>\r\n   <li>Элемент управления не должен быть отключен (атрибут <span class=\"att\">disabled</span>).</li>\r\n   <li>В раскрывающемся списке (элемент <a href=\"/html/tag_select.php\" class=\"tag\" title=\"HTML тег select\">&lt;select&gt;</a>) атрибут <a href=\"/html/tag_select_att_name.php\" class=\"att\" title=\"Атрибут name HTML тега select\">name</a> определяет имя элемента управления, а выбранный элемент, или элементы <a href=\"/html/tag_option.php\" class=\"tag\" title=\"HTML тег option\">&lt;option&gt;</a> определяют его значение. Элементы <a href=\"/html/tag_option.php\" class=\"tag\" title=\"HTML тег option\">&lt;option&gt;</a> сериализуются только в том случае, если они будут выбраны.</li>\r\n</ul>'),
(32, 'lib', 'Библиотеки', '<ul>\r\n        <h3>jQuery</h3>\r\n        <li><a href=\"http://jquery.com\" target=\"_blank\">/G/jquery.com/</a> - официальный сайт jQuery</li>\r\n        <li><a href=\"http://visualjquery.com\" target=\"_blank\">/G/visualjquery.com/</a> - документация по jQuery в удобном виде</li>\r\n        <li><a href=\"http://docs.jquery.com\" target=\"_blank\">/G/docs.jquery.com/Tutorials</a> - ссылки на различные учебные материалы по jQuery</li>\r\n        <li><a href=\"http://interface.eyecon.ro\" target=\"_blank\">/G/interface.eyecon.ro/</a> - библиотека всевозможных эффектов и элементов интерфейса</li>\r\n        <li><a href=\"http://www.malsup.com\" target=\"_blank\">/G/www.malsup.com/jquery/form/</a> - плагин, облегчающий работу с формами и технологией AJAX</li>\r\n        <li><a href=\"http://www.stilbuero.de\" target=\"_blank\">/G/www.stilbuero.de/jquery/tabs</a> - плагин для создания табов</li>\r\n        <li><a href=\"http://jquery.com\" target=\"_blank\">/G/jquery.com/demo/thickbox/</a> - плагин для показа различной информации в \"диалоге\" внутри окна браузера</li>\r\n        <li><a href=\"http://www.rsdn.ru\" target=\"_blank\">/G/www.rsdn.ru/article/inet/jQuery.xml - описание и примеры использования на русском языке</a></li><a href=\"http://www.rsdn.ru\" target=\"_blank\">\r\n\r\n        <h3>Prototype.js</h3>\r\n        </a><li><a href=\"http://www.rsdn.ru\" target=\"_blank\"></a><a href=\"http://prototypejs.org\" target=\"_blank\">/G/prototypejs.org/</a> - библиотека Prototype.js</li>\r\n        <li><a href=\"http://prototype.conio.net\" target=\"_blank\">Prototype.conio.net</a>\r\n            специализируется на AJAX-взаимодействиях и содержит AJAX-объект,\r\n            который включает в себя несколько объектов, предназначенных для выполнения основных\r\n            задач, таких как формирование HTTP-запросов, обновление части\r\n            документа однократно или периодически, вставка нового содержимого в документ, периодическое\r\n            обновление части документа.\r\n        </li><li><a href=\"http://script.aculo.us\" target=\"_blank\">Script.aculo.us</a>	и <a href=\"http://openrico.org\" target=\"_blank\">Rico</a>\r\n            являются надстройками над Prototype и предоставляют UI-эффекты,\r\n            поддержку \"drag and drop\", а также включают общие элементы управления GUI,\r\n            ориентированные на JavaScript.\r\n\r\n            <h3>JsHttpRequest</h3>\r\n        </li><li><a href=\"http://dklab.ru\" target=\"_blank\">JsHttpRequest</a>\r\n\r\n\r\n            <h3>The Dojo Toolkit</h3>\r\n        </li><li><a href=\"http://dojotoolkit.org\" target=\"_blank\">The Dojo Toolkit</a>\r\n            содержит API и набор элементов GUI для поддержки разработки web-приложений со сложным графическим интерфейсом.<br>\r\n            Dojo включает в себя интеллектуальную систему для формирования\r\n            структуры web-приложения (packaging system), различные UI-эффекты, API\r\n            для реализации механизма \"drag and drop\", API элементов управления GUI, обработки\r\n            событий, API для хранения проектов и API для реализации\r\n            AJAX-взаимодействия.\r\n            Dojo помогает решать общие проблемы пользователя (usability), такие как действия при\r\n            навигации между web-страницами, способность распознать нажатие кнопки\r\n            \"Back\" в браузере или изменения в строке ввода URL для создания\r\n            закладки (bookmarking), способность отключать лишнюю функциональность,\r\n            если AJAX/JavaScript не полностью поддерживаются клиентом-браузером.\r\n\r\n            <h3>Yahoo UI Library</h3>\r\n        </li><li><a href=\"http://developer.yahoo.net\" target=\"_blank\">Yahoo	UI Library</a>\r\n            - это библиотека утилит и набор элементов управления GUI, использующий API для\r\n            поддержки сложных клиентских приложений. Она включает поддержку\r\n            AJAX и событий, распространяемую на все виды  браузеров, анимацию, DOM,\r\n            реализацию механизма \"drag and drop\" и обмен событиями между\r\n            браузерами. Yahoo UI Library хорошо документирована и содержит много\r\n            примеров.\r\n\r\n            <h3>DWR (Dynamic Web Remoting)</h3>\r\n        </li><li><a href=\"http://dwr.dev.java.net\" target=\"_blank\">DWR (Dynamic Web Remoting)</a>\r\n            - это система, включающая как клиентскую, так и\r\n            серверную часть, который ориентирован на использование разработчиками\r\n            механизма вызовов удаленных процедур (Remote Procedure Calls, RPC) между\r\n            клиентскими сценариями на JavaScript и серверными Java-объектами\r\n            (plain old Java objects, POJO), развернутых на Java\r\n            EE web-контейнере.<br>\r\n            На серверной стороне DWR использует сервлеты для взаимодействия с\r\n            Java-объектами и возвращает или объект-представление данного\r\n            Java-объекта, или XML-документ.\r\n\r\n            <h3>Zimbra</h3>\r\n        </li><li><a href=\"http://dwr.dev.java.net\" target=\"_blank\">Zimbra</a>\r\n            - клиент-серверная система, ориентированная на\r\n            обмен сообщениями и доставку e-mail в сложных клиентских приложениях на\r\n            базе JavaScript. Zimbra включает API для набора инструментов UI,\r\n            учитывающий различия между браузерами и предоставляющий множество встроенных элементов управления GUI,\r\n            API событий для обмена событиями как между элементами управления UI, так и между\r\n            клиентом и сервером, вспомогательные классы, упрощающие разработку\r\n            клиентской функциональности на JavaScript, надстройку над DOM, которая облегчает\r\n            решение вопросов, касающихся несовпадения реализаций DOM в разных\r\n            браузерах, и сетевые API, которые помогают JavaScript-клиентам общаться\r\n            через AJAX и SOAP.\r\n\r\n\r\n            <h3>Разное</h3>\r\n        </li><li><a href=\"http://www.webdevout.net\" target=\"_blank\">/G/www.webdevout.net/browser_support.php</a> - подробный анализ совместимости популярных браузеров с Web-стандартами.</li>\r\n        <li><a href=\"http://getfirebug.com\" target=\"_blank\">/G/getfirebug.com/</a> - расширение для браузера Firefox, незаменимый помощник в отладке скриптов.</li>\r\n        <li><a href=\"http://jquery.com\" target=\"_blank\">/G/jquery.com/blog/2006/10/18/zebra-table-showdown/</a> - пример с раскрашиванием таблицы. Показаны решения, использующие и другие библиотеки.</li>\r\n\r\n    </ul>'),
(33, 'habr', 'AJAX для новичков', '<div class=\"post__text post__text-html js-mediator-article\">Сейчас в сети Интернет наблюдается очень активное развитие (и даже использование) новых технологий. Одна из таких технологий — <i>AJAX</i>.<br>\r\n<a name=\"habracut\"></a><br>\r\n<br>\r\n<h3>Что такое AJAX?</h3><br>\r\n<br>\r\nAJAX — это аббревиатура, которая означает Asynchronous Javascript and XML. На самом деле, AJAX не является новой технологией, так как и Javascript, и XML существуют уже довольно продолжительное время, а AJAX — это синтез обозначенных технологий. AJAX чаще всего ассоцириуется с термином Web 2.0 и преподносится как новейшее Web-приложение.<br>\r\n<br>\r\n<br>\r\nПри использовании AJAX нет необходимости обновлять каждый раз всю страницу, так как обновляется только ее конкретная часть. Это намного удобнее, так как не приходится долго ждать, и экономичнее, так как не все обладают безлимитным интернетом. Правда в этом случае, разработчику необходимо следить, чтобы пользователь был в курсе того, что происходит на странице. Это можно реализовать с использованием индикаторов загрузки, текстовых сообщений о том, что идёт обмен данными с сервером. Необходимо также понимать, что не все браузеры поддерживают AJAX (старые версии браузеров и текстовые браузеры). Плюс Javascript может быть отключен пользователем. Поэтому, не следует злоупотреблять использованием технологии и прибегать к альтернативным методам представления информации на Web-сайте.<br>\r\n<br>\r\n<br>\r\nОбобщим достоинства AJAX:<br>\r\n<ul>\r\n<li>Возможность создания удобного Web-интерфейса</li>\r\n<li>Активное взаимодействие с пользователем</li>\r\n<li>Частичная перезагрузка страницы, вместо полной</li>\r\n<li>Удобство использования</li>\r\n</ul><br>\r\nAJAX использует два метода работы с веб-страницей: изменение Web-страницы не перезагружая её, и динамическое обращение к серверу. Второе может осуществляться несколькими способами, в частности, XMLHttpRequest, о чем мы и будем говорить, и использование техники скрытого фрейма.<br>\r\n<br>\r\n<br>\r\n<h3>Обмен данными</h3><br>\r\n<br>\r\nДля того, чтобы осуществлять обмен данными, на странице должен быть создан объект XMLHttpRequest, который является своеобразным посредником между Браузером пользователя и сервером (рис. 1). С помощью XMLHttpRequest можно отправить запрос на сервер, а также получить ответ в виде различного рода данных.<br>\r\n<br>\r\n<br>\r\n<img src=\"http://www.sysman.ru/index.php?act=Attach&amp;type=post&amp;id=1184705444\"><br>\r\n<br>\r\n<br>\r\nОбмениваться данными с сервером можно двумя способами. Первый способ — это GET-запрос. В этом запросе вы обращаетесь к документу на сервере, передавая ему аргументы через сам URL. При этом на стороне клиента будет логично использовать функция Javascript`а escape для того, чтобы некоторые данные не прервали запрос.<br>\r\n<br>\r\n<br>\r\nНе рекомендуется делать GET-запросы к серверу с большими объемами данных. Для этого существует POST-запрос.<br>\r\n<br>\r\n<br>\r\nКлиент часть, написанная на Javascript, должна обеспечивать необходимую функциональность для безопасного обмена с сервером и предоставлять методы для обмена данными любым из вышеперечисленных способов. Серверная часть должна обрабатывать входные данные, и на основе их генерировать новую информацию (например, работая с базой данных), и отдавать ее обратно клиенту. Например, для запроса информации с сервера можно использовать обычный GET-запрос с передачей нескольких и небольших по размеру параметров, а для обновления информации, или добавления новой информации потребуется использовать уже POST-запрос, так как он позволяет передавать большие объемы данных.<br>\r\n<br>\r\n<br>\r\nКак уже было сказано, AJAX использует асинхронную передачу данных. Это значит, что пока идёт передача данных, пользователь может совершать другие, необходимые ему действия. В это время следует оповестить пользователя о том, что идёт какой-либо обмен данными, иначе пользователь подумает, что произошло что-то не то и может покинуть сайт, или повторно вызвать «зависшую», по его мнению, функцию. Индикация во время обмена данными в приложении Web 2.0 играет очень важную роль: посетители могли еще не привыкнуть к таким способам обновления страницы.<br>\r\n<br>\r\n<br>\r\nОтвет от сервера может быть не только XML, как следует из названия технологии. Помимо XML, можно получить ответ в виде обычного текста, или же JSON (Javascript Object Notation). Если ответ был получен простым текстом, то его можно сразу вывести в контейнер на странице. При получении ответа в виде XML, обычно происходит обработка полученного XML документа на стороне клиента и преобразование данных к (X)HTML. При получении ответа в формате JSON клиент должен лишь выполнить полученный код (функция Javascript`а eval) для получения полноценного объекта Javascript. Но здесь нужно быть осторожным и учитывать тот факт, что с использованием этой технологии может быть передан вредоносный код, поэтому перед выполнением полученного с сервера кода следует его тщательно проверить и обработать. Существует такая практика, как «холостой» запрос, при котором никакой ответ от сервера не приходит, лишь изменяются данные на стороне сервера.<br>\r\n<br>\r\n<br>\r\nВ разных браузерах данный объект обладает разными свойствами, но в целом он совпадает.<br>\r\n<br>\r\n<br>\r\n<h3>Методы объекта XMLHttpRequest</h3><br>\r\n<br>\r\nЗаметьте, что названия методов записаны в том же стиле (Camel-style), что и другие функции Javascript. Будьте внимательны при их использовании.<br>\r\n<br>\r\n<br>\r\n<i>abort()</i> — отмена текущего запроса к серверу.<br>\r\n<br>\r\n<br>\r\n<i>getAllResponseHeaders()</i> — получить все заголовки ответа от сервера.<br>\r\n<br>\r\n<br>\r\n<i>getResponseHeader(«имя_заголовка»)</i> — получить указаный заголовок.<br>\r\n<br>\r\n<br>\r\n<i>open(«тип_запроса»,«URL»,«асинхронный»,«имя_пользователя»,«пароль»)</i> — инициализация запроса к серверу, указание метода запроса. Тип запроса и URL — обязательные параметры. Третий аргумент — булево значение. Обычно всегда указывается true или не указывается вообще (по умолчанию — true). Четвертый и пятый аргументы используются для аутентификации (это очень небезопасно, хранить данные об аутентификации в скрипте, так как скрипт может посмотреть любой пользователь).<br>\r\n<br>\r\n<br>\r\n<i>send(«содержимое»)</i> — послать HTTP запрос на сервер и получить ответ.<br>\r\n<br>\r\n<br>\r\n<i>setRequestHeader(«имя_заголовка»,«значение»)</i> — установить значения заголовка запроса.<br>\r\n<br>\r\n<br>\r\n<h3>Свойства объекта XMLHttpRequest</h3><br>\r\n<br>\r\n<i>onreadystatechange</i> — одно из самых главных свойств объекта XMLHttpRequest. С помощью этого свойства задаётся обработчик, который вызывается всякий раз при смене статуса объекта.<br>\r\n<br>\r\n<br>\r\n<i>readyState</i> — число, обозначающее статус объекта.<br>\r\n<br>\r\n<br>\r\n<i>responseText</i> — представление ответа сервера в виде обычного текста (строки).<br>\r\n<br>\r\n<br>\r\n<i>responseXML</i> — объект документа, совместимый с DOM, полученного от сервера.<br>\r\n<br>\r\n<br>\r\n<i>status</i> — состояние ответа от сервера.<br>\r\n<br>\r\n<br>\r\n<i>statusText</i> — текстовое представление состояния ответа от сервера.<br>\r\n<br>\r\n<br>\r\nСледует подробнее расммотреть свойство readyState:<br>\r\n<ul>\r\n<li>0 — Объект не инициализирован.</li>\r\n<li>1 — Объект загружает данные.</li>\r\n<li>2 — Объект загрузил свои данные.</li>\r\n<li>3 — Объек не полностью загружен, но может взаимодействовать с пользователем.</li>\r\n<li>4 — Объект полностью инициализирован; получен ответ от сервера.</li>\r\n</ul><br>\r\nИменно опираясь на состояние готовности объекта можно представить посетителю информацию о том, на какой стадии находится процесс обмена данными с сервером и, возможно, оповестить его об этом визуально.<br>\r\n<br>\r\n<br>\r\n<h3>Создание объекта XMLHttpRequest</h3><br>\r\n<br>\r\nКак уже говорилось выше, создание данного объекта для каждого типа браузера — уникальный процесс.<br>\r\n<br>\r\n<br>\r\nНапример, для создания объекта в Gecko-совместимых браузерах, Konqueror`е и Safari, нужно использовать следующее выражение:<br>\r\n<br>\r\n<br>\r\n<code>var Request = new XMLHttpRequest(); <br>\r\n</code><br>\r\n<br>\r\n<br>\r\nА для Internet Explorer`а используется следующее:<br>\r\n<br>\r\n<br>\r\n<code>var Request = new ActiveXObject(\"Microsoft.XMLHTTP\"); <br>\r\n</code><br>\r\n<br>\r\n<br>\r\nЛибо<br>\r\n<br>\r\n<br>\r\n<code>var Request = new ActiveXObject(\"Msxml2.XMLHTTP\"); <br>\r\n</code><br>\r\n<br>\r\n<br>\r\nТеперь, чтобы добиться кроссбраузерности, необходимо сложить все функции в одну:<br>\r\n<br>\r\n<br>\r\n<code><pre>function CreateRequest()\r\n{\r\n    var Request = false;\r\n\r\n    if (window.XMLHttpRequest)\r\n    {\r\n        //Gecko-совместимые браузеры, Safari, Konqueror\r\n        Request = new XMLHttpRequest();\r\n    }\r\n    else if (window.ActiveXObject)\r\n    {\r\n        //Internet explorer\r\n        try\r\n        {\r\n             Request = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }    \r\n        catch (CatchException)\r\n        {\r\n             Request = new ActiveXObject(\"Msxml2.XMLHTTP\");\r\n        }\r\n    }\r\n \r\n    if (!Request)\r\n    {\r\n        alert(\"Невозможно создать XMLHttpRequest\");\r\n    }\r\n    \r\n    return Request;\r\n} \r\n</pre></code><br>\r\n<br>\r\n<br>\r\nПосле всего этого можно создавать данный объект и не беспокоится за работоспособность на популярных браузерах. Но создать объект можно в разных местах. Если создать его глобально, то в определенный момент времени возможен будет только один запрос к серверу. Можно создавать объект всякий раз, как происходит запрос к серверу (это почти полностью решит проблему).<br>\r\n<br>\r\n<br>\r\n<h3>Запрос к серверу</h3><br>\r\n<br>\r\nАлгоритм запроса к серверу выглядит так:<br>\r\n<ul>\r\n<li>Проверка существования XMLHttpRequest.</li>\r\n<li>Инициализация соединения с сервером.</li>\r\n<li>Посылка запрса серверу.</li>\r\n<li>Обработка полученных данных.</li>\r\n</ul><br>\r\nДля создания запроса к серверу мы создадим небольшую функцию, которая будет по функциональности объединять в себе функции для GET и POST запросов.<br>\r\n<br>\r\n<br>\r\n<code><pre>/*\r\nФункция посылки запроса к файлу на сервере\r\nr_method  - тип запроса: GET или POST\r\nr_path    - путь к файлу\r\nr_args    - аргументы вида a=1&amp;b=2&amp;c=3...\r\nr_handler - функция-обработчик ответа от сервера\r\n*/\r\nfunction SendRequest(r_method, r_path, r_args, r_handler)\r\n{\r\n    //Создаём запрос\r\n    var Request = CreateRequest();\r\n    \r\n    //Проверяем существование запроса еще раз\r\n    if (!Request)\r\n    {\r\n        return;\r\n    }\r\n    \r\n    //Назначаем пользовательский обработчик\r\n    Request.onreadystatechange = function()\r\n    {\r\n        //Если обмен данными завершен\r\n        if (Request.readyState == 4)\r\n        {\r\n            //Передаем управление обработчику пользователя\r\n            r_handler(Request);\r\n        }\r\n    }\r\n    \r\n    //Проверяем, если требуется сделать GET-запрос\r\n    if (r_method.toLowerCase() == \"get\" &amp;&amp; r_args.length &gt; 0)\r\n    r_path += \"?\" + r_args;\r\n    \r\n    //Инициализируем соединение\r\n    Request.open(r_method, r_path, true);\r\n    \r\n    if (r_method.toLowerCase() == \"post\")\r\n    {\r\n        //Если это POST-запрос\r\n        \r\n        //Устанавливаем заголовок\r\n        Request.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded; charset=utf-8\");\r\n        //Посылаем запрос\r\n        Request.send(r_args);\r\n    }\r\n    else\r\n    {\r\n        //Если это GET-запрос\r\n        \r\n        //Посылаем нуль-запрос\r\n        Request.send(null);\r\n    }\r\n} \r\n</pre></code><br>\r\n<br>\r\n<br>\r\nСоздавать запрос стало намного проще. Для примера напишем функцию, которая будет получать содержимое файла на сервере и выводить его в контейнер.<br>\r\n<br>\r\n<br>\r\n<code><pre>function ReadFile(filename, container)\r\n{\r\n    //Создаем функцию обработчик\r\n    var Handler = function(Request)\r\n    {\r\n        document.getElementById(container).innerHTML = Request.responseText;\r\n    }\r\n    \r\n    //Отправляем запрос\r\n    SendRequest(\"GET\",filename,\"\",Handler);\r\n    \r\n} \r\n</pre></code><br>\r\n<br>\r\n<br>\r\nИменно таким образом происходит взаимодействие с сервером.<br>\r\n<br>\r\n<br>\r\n<h3>Обработка ответа</h3><br>\r\n<br>\r\nВ предыдущем примере мы сделали функцию запроса к серверу. Но она, по сути, небезопасна, так как мы не обрабатываем состояния объекта и состояния ответа от сервера.<br>\r\n<br>\r\n<br>\r\nДополним наш код, чтобы он смог выводить визуальное оповещение о процессе загрузки.<br>\r\n<br>\r\n<br>\r\n<code><pre>...\r\nRequest.onreadystatechange = function()\r\n{\r\n    //Если обмен данными завершен\r\n    if (Request.readyState == 4)\r\n    {\r\n        //Передаем управление обработчику пользователя\r\n        r_handler(Request);\r\n    }\r\n    else\r\n    {\r\n        //Оповещаем пользователя о загрузке\r\n    }\r\n}\r\n... \r\n</pre></code><br>\r\n<br>\r\n<br>\r\nКак вы уже знаете, объект XMLHttpRequest позволяет узнать статус ответа от сервера. Воспользуемся этой возможностью.<br>\r\n<br>\r\n<br>\r\n<code><pre>...\r\nRequest.onreadystatechange = function()\r\n{\r\n    //Если обмен данными завершен\r\n    if (Request.readyState == 4)\r\n    {\r\n        if (Request.status == 200)\r\n        {\r\n            //Передаем управление обработчику пользователя\r\n            r_handler(Request);\r\n        }\r\n        else\r\n        {\r\n            //Оповещаем пользователя о произошедшей ошибке\r\n        }\r\n    }\r\n    else\r\n    {\r\n        //Оповещаем пользователя о загрузке\r\n    }\r\n \r\n}\r\n... \r\n</pre></code><br>\r\n<br>\r\n<br>\r\n<h3>Варианты ответа от сервера</h3><br>\r\n<br>\r\nОт сервера можно получить данные нескольких видов:<br>\r\n<ul>\r\n<li>Обычный текст</li>\r\n<li>XML</li>\r\n<li>JSON</li>\r\n</ul><br>\r\nЕсли вы получаете обычный текст, то вы можете сразу же направить его в контейнер, то есть на вывод. При получении данных в виде XML вы должны обработать данные с помощью DOM-функций, и представить результат с помощью HTML.<br>\r\n<br>\r\n<br>\r\n<i>JSON</i> — это объектная нотация Javascript. С ее помощью можно представить объект в виде строки (здесь можно привести аналогию с функцией сериализации). При получении JSON-данных вы должны выполнить их, чтобы получить полноценный объект Javascript и произвести с ним необходимые операции. Помните, что такая передача данных и выполнение их не являются безопасными. Вы должны следить за тем, что поступает на исполнение.<br>\r\n<br>\r\n<br>\r\nПример кода JSON:<br>\r\n<code><pre>{\r\n\r\n\"data\":\r\n{\r\n    \"misc\":\r\n    [\r\n        {\r\n            \"name\" : \"JSON-элемент один\",\r\n            \"type\" : \"Подзаголовок 1\"\r\n        },\r\n        \r\n        {\r\n            \"name\" : \"JSON-элемент два\",\r\n            \"type\" : \"Подзаголовок 2\"\r\n        }\r\n    ]\r\n}\r\n\r\n} \r\n</pre></code><br>\r\n<br>\r\n<br>\r\nПри получении такого кода, производим следующее действие:<br>\r\n<br>\r\n<br>\r\n<code>var responsedata = eval(\"(\" + Request.responseText + \")\") <br>\r\n</code><br>\r\n<br>\r\n<br>\r\nПосле выполнения данного кода вам будет доступен объект <i>responsedata</i>.<br>\r\n<br>\r\n<br>\r\n<h3>Работа с серверными языками программирования</h3><br>\r\n<br>\r\nТакая работа ничем не отличается от обычной. Для примеров я возьму PHP в качестве серверного языка. В клиентской части ничего не изменилось, но серверная часть теперь представлена PHP-файлом.<br>\r\n<br>\r\n<br>\r\nПо традиции, начнем с приветствия нашему замечательному миру:<br>\r\n<br>\r\n<br>\r\n<code><pre>    echo \"Hello, World!\";\r\n</pre></code><br>\r\n<br>\r\n<br>\r\nПри обращении к этому файлу клиенту вернется строка Hello, World. Как вы понимаете, это представляет широчайшие возможности для построения приложений. На основе передачи аргументов при вызове сервера с помощью XMLHttpRequest можно сделать параметризацию вывода, тем самым обеспечив обширную функциональность Web-приложения.<br>\r\n<br>\r\n<br>\r\nПомимо PHP, можно использовать любой другой серверный язык программирования.<br>\r\n<br>\r\n<br>\r\n<h3>Литература по теме</h3><br>\r\n<ul>\r\n<li><a href=\"http://www.books.ru/shop/books/477695\">Ajax для профессионалов</a></li>\r\n<li><a href=\"http://www.books.ru/shop/books/422835\">Ajax in action</a></li>\r\n</ul><br>\r\n<br>\r\n<em>Статья написана с целью рассказать новичкам о работе AJAX изнутри. Если Вам кажется, что что-то написано неточно или неверно, поправляйте, пожалуйста, меня, для того, чтобы создать достойную статью вместе.<br>\r\n<br>\r\n<br>\r\nКонечно, если есть возможность, стоит использовать существующие фреймворки, я считаю. Но знать «как оно работает» всё-же необходимо.</em></div>'),
(40, 'auth', 'dgdf', 'text');

-- --------------------------------------------------------

--
-- Структура таблицы `menu`
--

CREATE TABLE `menu` (
  `id` int(11) NOT NULL COMMENT 'ID',
  `title` varchar(200) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT 'Заголовок в браузере',
  `alias` varchar(200) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT 'Ссылка страницы',
  `position_item` int(11) DEFAULT NULL COMMENT '-2:скрытая,-1:подэлемент,0+:элемент',
  `order_item` text COLLATE utf8_unicode_ci NOT NULL COMMENT 'JSON Порядок элементов подменю'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='Меню сайта и настройки страниц и отображения';

--
-- Дамп данных таблицы `menu`
--

INSERT INTO `menu` (`id`, `title`, `alias`, `position_item`, `order_item`) VALUES
(1, 'Главная', 'main', 0, ''),
(2, 'Политика конфиденциальности', 'privacy', -2, ''),
(3, 'Пользовательское соглашение', 'terms', -2, ''),
(4, 'О проекте', 'about', -2, ''),
(5, 'Панель управления (ПУ)', 'admin', -2, ''),
(6, 'Вход', 'auth', -2, ''),
(7, 'Регистрация', 'reg', -2, ''),
(8, 'XMLHttpRequest', NULL, 1, '{\"0\":9,\"1\":10,\"2\":11,\"3\":12,\"4\":13}'),
(9, 'Основы XMLHttpRequest', 'xmlhttprequest', -1, ''),
(10, 'POST, формы и кодировка', 'xhrforms', -1, ''),
(11, 'Кросс-доменные запросы', 'xhrcrossdomain', -1, ''),
(12, 'Индикация прогресса', 'xhronprogress', -1, ''),
(13, 'Возобновляемая закачка', 'xhrresume', -1, ''),
(14, 'jQuery Ajax', 'jqueryajax', 2, ''),
(15, '.ajaxComplete()', 'jm_ajaxcomplete', -2, ''),
(16, '.ajaxError()', 'jm_ajaxerror', -2, ''),
(17, '.ajaxSend()', 'jm_ajaxsend', -2, ''),
(18, '.ajaxStart()', 'jm_ajaxstart', -2, ''),
(19, '.ajaxStop()', 'jm_ajaxstop', -2, ''),
(20, '.ajaxSuccess()', 'jm_ajaxsuccess', -2, ''),
(21, '.ajax()', 'jm_ajax', -2, ''),
(22, '.ajaxPrefilter()', 'jm_ajaxprefilter', -2, ''),
(23, '.ajaxSetup()', 'jm_ajaxsetup', -2, ''),
(24, '.ajaxTransport()', 'jm_ajaxtransport', -2, ''),
(25, '.get()', 'jm_get', -2, ''),
(26, '.getJSON()', 'jm_getjson', -2, ''),
(27, '.getScript()', 'jm_getscript', -2, ''),
(28, '.param()', 'jm_param', -2, ''),
(29, '.post()', 'jm_post', -2, ''),
(30, '.load()', 'jm_load', -2, ''),
(31, '.serialize()', 'jm_serialize', -2, ''),
(32, '.serializeArray()', 'jm_serializearray', -2, ''),
(33, 'AJAX для новичков', 'habr', 3, ''),
(34, 'Библиотеки', 'lib', 4, '');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(4) NOT NULL,
  `name` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `login` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `user_group` int(1) NOT NULL DEFAULT '1' COMMENT '1 - Клиент, 2 - Администратор'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `name`, `login`, `password`, `user_group`) VALUES
(1, 'Гутниченко Д.А.', 'admin', '$2y$10$KIkEVlh5PTvaeJGL6qFtI.Y3WcTa.Hi9TddvV8UJD842ToHuglHNK', 2),
(23, 'Степанов К.В.', 'kiryuha', '$2y$10$7Zgi4UV6Ol2BcJ.uJ0jWu.FaLcHxF7bhQFat8Q72jdT/t/y6k//kW', 1),
(24, 'Новицкая Ю.В.', 'test', '$2y$10$GPXuJ0tK28DmDZVyRu024eoxiUsmqptRpsUqQJu770GrSQEJGyDoi', 1);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `content`
--
ALTER TABLE `content`
  ADD PRIMARY KEY (`id`),
  ADD KEY `Menu_And_Content` (`alias_menu`);

--
-- Индексы таблицы `menu`
--
ALTER TABLE `menu`
  ADD PRIMARY KEY (`id`),
  ADD KEY `alias` (`alias`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `login` (`login`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `content`
--
ALTER TABLE `content`
  MODIFY `id` int(3) NOT NULL AUTO_INCREMENT COMMENT 'ID', AUTO_INCREMENT=71;

--
-- AUTO_INCREMENT для таблицы `menu`
--
ALTER TABLE `menu`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID', AUTO_INCREMENT=34;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=25;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `content`
--
ALTER TABLE `content`
  ADD CONSTRAINT `PAGE` FOREIGN KEY (`alias_menu`) REFERENCES `menu` (`alias`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
